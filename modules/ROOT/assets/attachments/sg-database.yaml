type: object
description: Database configuration settings
properties:
  databases:
    this-db:
      allow_conflicts:
        type: boolean
        description: |+
          **Deprecated at 3.0 **

          Use ```allow_conflict``` to define whether Sync Gateway will handle conflicts.

          The default of ```true``` indicates that conflicts are handled.

          Set the value to ```false``` to cause Sync Gateway to reject any attempt to write conflicting revisions (returning a `409` HTTP status code).
          It will be up to the client to resolve the conflict.

          Restarting Sync Gateway with this property enabled will not automatically result in disk space savings (compaction on a document won't occur until a document is updated).

          *Constraints:*
          - Push replications to pre-2.8 targets do not support the `"allow_conflicts": false` setting; the target must use `"allow_conflicts": true`.

          Changes initiate a database restart.
        default: 'true'
      allow_empty_password:
        type: boolean
        description:
          Use ```allow_empty_password``` to define whether to all Sync Gateway users to be created with empty passwords.
        default: 'false'
      bucket:
        type: string
        default: database name
        description: |+
          Use ```bucket``` to identify the Couchbase Server bucket name for this database.

      bucket_op_timeout_ms:
        type: integer
        description: |+
          Use ```bucket_op_timeout_ms``` to define how long Sync Gateway will wait for a bucket operation to complete before timing out and trying again.

          You may increase this value where there is a heavy load on Couchbase Server and operations are likely to take more than 2.5 seconds to complete.

          The default value is 2500 milliseconds.

          Changes initiate a database restart.
        default: 2500
      cacertpath:
        type: string
        description: |+
          Use ```cacertpath``` to define the path (relative or absolute) to the root CA certificate used to verify the certificate chain and hostname of the Couchbase Server cluster.

          Optional for X.509 authentication.
          If it isn't provided, Sync Gateway will accept any certificate provided by Couchbase Server.

          Changes initiate a database restart.
      cache:
        type: object
        description: |+
          The ```cache``` group of properties define the cache configuration for this database
        properties:
          channel_cache:
            type: object
            description: |+
              Channel cache configuration

              Changes to settings will require recreation of caches for dbContext
            properties:
              compact_high_watermark_pct:
                type: integer
                description: |+
                  Use ```compact_high_watermark_pct``` to define the trigger value for starting channel cache eviction.
                  Specify the value as a percentage (of ```max_number```)

                  When the cache size, determined by `max_number`, reaches the high watermark, the eviction process iterates through the cache, removing inactive channels.
                default: 80
              compact_low_watermark_pct:
                type: integer
                description: |+
                  Use ```compact_low_watermark_pct``` to define the trigger value for stopping channel cache eviction.
                  Specify the value as a percentage (of ```max_number```)

                  When the cache size, determined by `max_number` returns to a value lower than `compact_low_watermark_pct`, the cache eviction process is stopped.
                default: 60

              enable_star_channel:
                type: boolean
                description: |+
                  Use ```enable_star_channel``` to define whether Sync GAteway should use the all documents (*) channel -- sometimes referred to as the 'star' channel.

                default: 'true'

              expiry_seconds:
                type: integer
                description: |+
                  Use ```expiry_seconds``` to define how long (in seconds) Sync Gateway should keep cached entries beyond the minimum retained.
                default: 60

              max_length:
                type: integer
                description: |+
                  Maximum number of entries maintained in cache per channel.
                default: 500

              max_num_pending:
                type: integer
                description: |+
                  Use ```max_num_pending``` to define the maximum number of pending sequences before skipping the sequence.
                default: 10000

              max_number:
                type: integer
                description: |+
                  Use ```max_number``` to define the maximum number of channel caches allowed at any one point.
                  This property is used alongside the associated eviction watermarks ```compact_low_watermark_pct``` and ```compact_high_watermark_pct``` to control the cache size.

                  The default value for this property is 50000.
                  Assuming the default channel `min_length` and `max_length` values, this would result in a memory usage under 1GB.

                  Tuning this property is an [Enterprise Edition](https://www.couchbase.com/products/editions) feature -- in the Community Edition any change to the default value is ignored.

                  *Enterprise Edition Only*: The `max_number` value can be tuned to optimize for cache hits (requests that are handled using the cache), as opposed to cache misses (requests that require a round-trip to Couchbase Server to fetch data). The cache hit/miss ratio can be obtained with the following:

                  ```cache hit/miss ratio``` = ```cache.chan_cache_hits``` / ```cache.chan_cache_misses```

                  Increasing the `max_number` value can increase the cache hit/miss ratio, resulting in better cache utilization.

                  If the cache size grows to reach the high watermark (`compact_high_watermark_pct`), channels with no connected replications will be evicted before channels which are associated with an active pull replication (i.e a blip-based pull replication in Couchbase Lite 2.x, or an active `/{db}/_changes` request in Couchbase Lite 1.x).

                  The minimum allowed value is 100.

                  It isn't possible to remove the limit altogether, users who wish to remove the limit would need to set `max_number` to an arbitrarily high value.
                default: 50000

              max_wait_pending:
                type: integer
                description: |+
                  Maximum wait time in milliseconds for a pending sequence before skipping sequences.
                default: 5000

              max_wait_skipped:
                type: integer
                description: |+
                  Maximum wait time in milliseconds for a skipped sequence before abandoning the sequence.
                default: 3600000
              min_length:
                type: integer
                description: |+
                  Minimum number of entries maintained in cache per channel.
                default: 50
              query_limit:
                type: integer
                default: 5000
                description: Limit used for channel queries

          rev_cache:
            type: object
            description: |+
              Revision cache configuration
            properties:
              size:
                type: integer
                description: |+
                  Size of the revision cache, specified as the total number of document revisions to cache in memory for all recently accessed documents. When the revision cache is full, Sync Gateway removes less recent document revisions to make room for new document revisions. Adjust this property to tune memory consumption by Sync Gateway, for example on servers with less memory and in cases when Sync Gateway creates many new documents and/or updates many documents relative to the number of read operations.

                  ##### Disabling the revision cache

                  Disabling the revision cache is an [Enterprise Edition](https://www.couchbase.com/products/editions) feature.

                  To disable the revision entirely, set this property to 0. Setting this property to 0 on the Community Edition is ignored.

                  Disabling the revision cache would be useful when there are very large documents or if you expect a very low cache hit rate. Otherwise it could negatively impact the latency of replications. It is generally not recommended to disable the revision cache, unless advised by Couchbase [Enterprise Support](https://www.couchbase.com/support-policy).
                default: 5000
              shard_count:
                type: integer
                description: |+
                  Tuning this property is an [Enterprise Edition](https://www.couchbase.com/products/editions) feature.
                  The Community Edition is configured with the default value, and will ignore any value in the configuration file.

                  Number of shards the rev cache should be split into. More shards allows for lower cache contention when accessing distinct revisions, at the cost of some memory overhead per-shard. This generally should not greatly exceed the number of CPU threads available to Sync Gateway.

                  It is generally not recommended to set this property, unless advised by Couchbase [Enterprise Support](https://www.couchbase.com/support-policy).
                default: 8
      certpath:
        type: string
        description: |+
          Relative or absolute path to the client's certificate to authenticate against Couchbase Server 5.5 or higher. The private key must be specified with the `databases.$db.keypath` property.

          Mode is static.

          Requires dbContext restart
      compact_interval_days:
        type: number
        description: |+
          Placeholder - to be completed

          Requires dbContext restart
      delta_sync:
        type: object
        description: |+
          *NOTE:* Delta Sync is an Enterprise Edition feature on Sync Gateway and Couchbase Lite.

          Delta Sync is the ability to replicate only parts of the Couchbase mobile document that have changed. This can result in significant savings in bandwidth consumption as well as throughput improvements, especially when network bandwidth is typically constrained.

          Delta Sync incurs additional bucket storage requirements which can be tuned with the [`rev_max_age_seconds`](#databases-this_db-delta_sync-rev_max_age_seconds) property.

          Delta Sync does not apply to attachment contents.

          Delta Sync is disabled by default on the Sync Gateway. You can enable it through the `enabled` property.

          If delta sync is enabled on Sync Gateway, then Couchbase Lite clients will switch to using delta sync automatically.
          Similarly, if delta sync is disabled on Sync Gateway, clients will switch to normal mode.

          *Note:* Push replications do not use Delta Sync when pushing to a pre-2.8 target.

          The following configuration example enables delta sync.

          ```javascript
          {
            "logging": {
              "console": {
                "log_keys": ["*"]
              }
            },
            "databases": {
              "db": {
                "server": "http://localhost:8091",
                "bucket": "default",
                "users": { "GUEST": { "disabled": false, "admin_channels": ["*"] } },
                "allow_conflicts": false,
                "revs_limit": 20,
                "delta_sync": {
                  "enabled": true,
                  "rev_max_age_seconds": 86400
                }
              }
            }
          }
          ```

          Footnotes:

          - Delta Sync is automatically enabled for peer-to-peer sync between Couchbase Lite clients.
          - Delta sync is disabled for Couchbase Lite database replicas.

          Mode is static.
        properties:
          enabled:
            type: boolean
            description: Set this property to "true" to enable delta sync.
            default: 'false'
          rev_max_age_seconds:
            type: integer
            description: |+
              On a write operation, the revision body is backed up in the bucket and retained for `rev_max_age_seconds` to calculate future revision deltas.
              As a result, new deltas can only be generated for read requests that come in within the `rev_max_age_seconds` time window.
              The storage of backed up revision bodies for delta sync incurs additional bucket storage requirements.

              The additional storage can be calculated with the following formula: `(doc_size * updates_per_day * 86400) / rev_max_age_seconds`.

              For example, with `rev_max_age_seconds`'s default value, an average document size of 4 KB and 100 writes/day, enabling delta sync would take up an additional 400 KB of storage on Couchbase Server (`(4 * 100 * 86400)/86400`).

              Setting this value to 0 will generate deltas opportunistically on pull replications, with no additional storage requirements.
            default: 86400
      enable_shared_bucket_access:
        type: boolean
        description: |+
          **Deprecated at 3.0**

          This property specifies whether to enable Mobile-Server Data Sync (a.k.a _mobile convergence_).

          You can learn more about this functionality in [Syncing Mobile and Server](./../shared-bucket-access.html)

          This property works in conjunction with the [import_docs](#databases-foo_db-import_docs) property, which determines whether a node participates in import processing.

          Set `enable_shared_bucket_access` to `true` on all nodes participating in such a configuration.

          On start-up, Sync Gateway will generate the mobile-specific metadata for all the pre-existing documents in the Couchbase Server bucket. From then on, documents can be inserted on the Server directly (with N1QL or SDKs) or through the Sync Gateway REST API.

          #### Tombstones

          When `enable_shared_bucket_access` is enabled, mobile tombstones are now also server tombstones. The document body is deleted, and only the mobile sync metadata required to replicate the tombstone is retained in the mobile extended attribute.

          The server's metadata purge interval becomes an important consideration for mobile deployments under convergence. When the server purges a tombstone (based on the metadata purge interval), that tombstone will no longer be replicated to mobile clients.

          Users should set the server's metadata purge interval based on their expected client replication frequency, to ensure that clients are notified of the tombstone prior to that tombstone being purged.

          NOTE: The default Metadata Purge Interval is set to 3 days which can potentially result in tombstones being purged before all clients have had a chance to get notified of it.

          Ways to tune the Metadata Purge Interval on Couchbase Server:

          - Bucket settings [on UI](https://docs.couchbase.com/server/current/manage/manage-settings/configure-compact-settings.html)
          - Bucket endpoint [on the REST API](https://docs.couchbase.com/server/current/rest-api/rest-bucket-create.html)

          #### Implementation notes for XATTRs:

          Mobile applications require additional metadata in order to manage security and replication. In previous versions of Sync Gateway, this information has always been stored in the document body. Sync Gateway 1.5 utilizes a new feature of Couchbase Server 5.0 called XATTRs (x-attributes) to store that metadata into an external document fragment.

          Extended attributes (xattrs) are JSON objects that can be associated with Couchbase documents. Each document can be associated with zero or more extended attributes. There are currently three types (user, system, virtual). Mobile Convergence uses a system extended attribute, which has the following characteristics central to convergence:

            - Shares lifetime with the document metadata - when a document is deleted, system xattrs are preserved with the tombstone.
            - Allocated 1MB of storage, independent of the 20MB available for the document

          Extended attributes are stored as part of the document, and are replicated with the document (both intra-cluster replication and XDCR).

          Extended attributes can be accessed via the SDKs using the sub-document API, via command-line tools, and via views.

          They are also accessible from N1QL in Couchbase Server 5.5 or above with the `().xattrs` property. For example, `SELECT meta().xattrs._sync from travel-sample where Meta().id = "user::demo";`.

          **WARNING:** The sync metadata is maintained internally by Sync Gateway and its structure can change at any time. It should not be used to drive business logic of applications. The direct use of the N1QL query is unsupported and must not be used in production environments.
          The `raw` endpoint ([/db/_raw/{docid}](../../../references/sync-gateway/admin-rest-api/index.html#!/document/get_db_raw_doc)) on Sync Gateway's Admin REST API returns both the document and it's associated mobile metadata.

          Changes initiate database restart
        default: 'false'
      event_handlers:
        type: object
        description: |+
          Webhooks in Sync Gateway are designed to minimize performance impacts on Sync Gateway's regular processing.

          Sync Gateway manages the number of processes that are spawned for webhook event handling, so that slow response times from the HTTP POST operations don't consume available CPU resources on Sync Gateway nodes.

          When a `webhook` event handler is defined, after Sync Gateway has updated a document, Sync Gateway adds a `document_changed` event to an asynchronous event-processing queue (the event queue).

          New processes are then spawned to apply the `filter` function to the documents and to perform the HTTP POST operations.

          When an event is not added to the event queue, but is instead discarded, a warning message is written to the the Sync Gateway log.

          You can configure Sync Gateway to log information about event handling, by including either the log key ```Event``` or ```Events+``` in the `Log` property in your Sync Gateway configuration file. `Events+` is more verbose.

          See also: [WebHooks](webhooks.html)

        properties:
          document_changed:
            description: The configuration for the action to perform when a document change is detected.
            type: array
            items:
              type: object
              properties:
                filter:
                  type: string
                  description: |+
                    Use ```document_changed.filter``` to define a JavaScript function that determines which documents to post.

                    The filter function accepts the document body as input and returns a boolean value.

                    - If the filter function returns true, then Sync Gateway posts the document.
                    - If the filter function returns false, then Sync Gateway does not post the document.
                    - If no filter function is defined, then Sync Gateway posts all changed documents.

                    Filtering only determines which documents to post.
                    It does not extract specific content from documents and post only that.
                  # required: 'true'
                handler:
                  type: string
                  description: Type of the event handler. This must be `"webhook"` (only 1 possible value currently).
                options:
                  type: string
                  description: |+
                    Options can be specified per-handler, and are specific to each handler type.
                timeout:
                  type: integer
                  description: |+
                    Defines the period in seconds to wait for a response to the POST operation.

                    Using a timeout ensures that slow-running POST operations don't cause the webhook event queue to back up.

                    Slow-running POST operations are discarded (if they time out), so that new events can be processed. When the timeout is reached, Sync Gateway stops listening for a response.

                    A value of 0 (zero) means no timeout.

                    You should not need to adjust it to tune performance as he default value should work well in the majority of cases.
                  default: 60
                url:
                  description: |+
                    Defines the URL to post documents to (for a webhook event handler).
                  type: string
                  # required: true
          db_state_changed:
            description: The configuration for the action to perform when a db_state change is detected.
            type: array
            items:
              type: object
              properties:
                filter:
                  type: string
                  description: |+
                  # required: 'true'
                handler:
                  type: string
                  description:
                    placeholder
                options:
                  type: string
                  description: |+
                    placeholder
                timeout:
                  type: integer
                  description: |+
                    placeholder
                  default: 60
                url:
                  description: |+
                    placeholder
                  type: string
                  # required: true
          max_processes:
            type: integer
            description: |+
              Maximum number of events that can be processed concurrently, that is, no more than `max_processes` concurrent processes will be spawned for event handling.

              The default value should work well in the majority of cases.
              You should not need to adjust it to tune performance.
              However, if you wish to ensure that most webhook posts are sent, you can set it to sufficiently high value.
            default: 500
          wait_for_process:
            type: string
            description: |+
              Maximum wait time in milliseconds before canceling event processing for an event that is detected when the event queue is full.

              If you set the value to 0 (zero), then incoming events are discarded immediately if the event queue is full.

              If you wish to avoid any blocking of standard Sync Gateway processing this may be a desirable value to use.

              The default value should work well in the majority of cases. You should not need to adjust it to tune performance.
            default: 100
      import_backup_old_rev:
        type: string
        description: |+
          Placeholder -- to be completed
      import_docs:
        type: boolean
        description: |+
          Introduced in Sync Gateway 1.5, this property specifies whether this Sync Gateway node should perform import processing.

          This property works in conjunction with the [enable_shared_bucket_access](#databases-this_db-enable_shared_bucket_access) property.

          Starting in Sync Gateway 2.7, all Sync Gateway nodes can be configured as import nodes. This results in performance benefits as the import process is shared across all Sync Gateway nodes.

          Prior to version 2.7, `import_docs` can only be set to `true` on a single node.

          #### Workload Isolation

          Starting in version 2.7, if `enable_shared_bucket_access` is set to `true` and `import_docs` is set to `false`, the node will not be participating in the import process.

          This configuration is specifically recommended for workload isolation: to isolate import nodes from the client-facing nodes. Workload isolation is preferable in deployments with a large write throughput.

          Prior to Release 2.1 a value of 'continuous' was also allowed. This was deprecated at Release 2.1 and replaced with the boolean value True. There is no change to the behavior or functionality (that is, a value of 'continuous' was interpreted as True and had the same effect).

          Mode is static.

        default: 'false'

      import_filter:
        type: string
        description: |+
          JavaScript filter function to determine if a document written to the Couchbase Server bucket should be made available to Couchbase Mobile clients (i.e imported). The filter function takes the document body as parameter and is expected to return a boolean to indicate whether the document should be imported.

          ```json
          {
            "databases": {
              "db": {
                "server": "http://localhost:8091",
                "bucket": "default",
                "password": "password",
                "import_docs": true,
                "enable_shared_bucket_access": true,
                "import_filter": `
              function(doc) {
                if (doc.type != "mobile") {
                  return false
                }
                return true
              }
              `,
              }
            }
          }
          ```
        default: function(doc) {return false;}

      import_partitions:
        type: integer
        description: |+
          Allows users to tune the number of partitions used for import processing. Partitions are distributed among all Sync Gateway nodes participating in import processing (import_docs:true), and each process a subset of the server's vbuckets.

          Each partition is processed by a separate goroutine, so import_partitions can be used to tune concurrency based on the number of Sync Gateway nodes, and the number of cores per node.
        default: 16
      isgr_enabled:
        type: boolean
        default: 'true'
        description: |+
          By default, this Sync Gateway node can be assigned inter-Sync Gateway replications for this database.

          If set to false, this Sync Gateway node will not participate in inter-Sync Gateway replications.
      isgr_websocket_heartbeat_secs:
        type: integer
        default: 300
        description: |+
          If set, this duration (in seconds) is used as a custom heartbeat interval for websocket ping frames in inter-Sync Gateway replications.
      keypath:
        type: string
        description: |+
          Relative or absolute path to the client's private key to authenticate against Couchbase Server 5.5 or higher. The client certificate must be specified with the `databases.$db.certpath` property.

          Mode is static.

          Change initiates database restart
      kv_tls_port:
        type: string
        description: |+
          Placeholder - to be completed
      local_doc_expiry_secs:
        type: integer
        description: |+
          Starting in Sync Gateway 2.0, it is possible to set an expiry value for local documents managed on Sync Gateway.


          Local documents are used by the Couchbase Lite replicator to track up to which sequence number a given client has synchronized and where it should resume the next time it connects to Sync Gateway.

          Clients that don't replicate within the expiry window will be forced to restart their replication from the beginning (sequence zero).

          This property is intended to minimize accumulation of obsolete replication checkpoint documents in the Couchbase Server bucket.

          Default -- `7776000` (90 days).
        default: 7776000
      name:
        type: string
        description: |+
          Use ```name``` to define the Sync Gateway database name.

          Change requires database restart
      num_index_replicas:
        type: integer
        description: |+
          Determines the number of index replicas used when creating the core Sync Gateway indexes. This property is only applicable if `databases.$db.use_views` is set to `false` (default value).

          Requires db restart
        default: 1
      offline:
        type: boolean
        description: |+
          Start the database offline
        default: false
      oidc:
        type: object
        description: OIDC providers.
        properties:
          default_provider:
            type: string
            description: |+
              Use this group to  define the provider to use for OIDC requests not specifying a provider.

              If only one provider is specified in the providers map, it is used as the default provider.

              If multiple providers are defined and default_provider is not specified, requests to ```/db/_oidc``` must specify the provider parameter.
          providers:
            type: object
            properties:
              this_provider:
                type: object
                properties:
                  issuer:
                    type: string
                    description: The OpenID Connect Provider issuer.
                  client_id:
                    type: string
                    description: The client ID defined in the provider for Sync Gateway.
                  validation_key:
                    type: string
                    description: Client secret associated with the client. Required for auth code flow.
                  signing_method:
                    type: string
                    description: Optional. Signing method used for validation key (provides additional security).
                  callback_url:
                    type: string
                    description: Optional. The callback URL to be invoked after the end-user obtains a client token. When not provided, Sync Gateway will generate it based on the incoming request.
                  register:
                    type: string
                    description: Optional. Whether Sync Gateway should automatically create users for successfully authenticated users that don't have an already existing user in Sync Gateway.
                  disable_session:
                    type: string
                    description: Optional. By default, Sync Gateway will create a new session for the user upon successful OIDC authentication, and set that session in the usual way on the _oidc_callback and _oidc_refresh responses. If disable_session is set to true, the session is not created (clients must use the ID token for subsequent authentications).
                  scope:
                    type: array
                    description: Optional. By default, Sync Gateway uses the scope "openid email" when calling the OP's authorize endpoint. If the scope property is defined in the config (as an array of string values), it will override this scope.
                    items:
                      type: string
                  include_access:
                    type: string
                    description: Optional. When true, the oidccallback response will include the access_token, expires_at and token_type properties returned by the OP.
                  user_prefix:
                    type: string
                    description: Optional. Specifies the prefix for Sync Gateway usernames for the provider. When not specified, defaults to issuer.
                  discovery_url:
                    type: string
                    description: Optional. Discovery URL used to obtain the OpenID Connect provider configuration. If not specified, the default discovery endpoint of [issuer]/.well-known/openid-configuration will be used.
                  disable_cfg_validation:
                    default: 'false'
                    type: boolean
                    description: |+
                      Couchbase Sync Gateway, by default, applies strict validation of the OpenID Connect configuration based on the OIDC specification.

                      Set ```"disable_cfg_validation": true``` when you do not want strict validation of the OIDC configuration.
                  disable_callback_state:
                    default: 'false'
                    type: boolean
                    description: |+
                      DisableCallbackState determines whether or not to maintain state between the ```/_oidc``` and
                      ```/_oidc_callback``` endpoints.

                      Disabling this action is NOT recommended as it will increase vulnerability to Cross-Site Request Forgery (CSRF, XSRF).

                      Set ```"disable_callback_state": true``` to switch-off callback state.

                  username_claim:
                    type: string
                    default: 'optional'
                    description: |+

                        You can use `username_claim` to specify a claim other than subject to use as the Sync Gateway username.

                        The specified claim must be a string, as numeric claims may be un-marshalled inconsistently between Sync Gateway and the underlying OIDC library.

                        When authenticating incoming OIDC tokens, Sync Gateway currently treats the username as [user_prefix]_[subject].
                        By default user_prefix is the issuer, but can be customized in the Sync Gateway provider config.
                        Subject is always the sub claim in the token.

                        Behavior:

                        - If username_claim is set but user_prefix is not set, use that claim as the Sync Gateway username.
                        - If username_claim is set and user_prefix is also set, use [user_prefix]_[username_claim] as the Sync Gateway username.
                        - If username_claim is not set and user_prefix is set, use [user_prefix]_[subject] as the Sync Gateway username (existing behavior).
                        - If neither username_claim nor user_prefix are set, use [issuer]_[subject] as the Sync Gateway username (existing behavior).
                  allow_unsigned_provider_tokens:
                    type: boolean
                    default: 'false'
                    description: |+
                      Unsigned provider tokens are not accepted.

                      Set ```"allow_unsigned_provider_tokens": true``` to opt-in to accepting unsigned tokens from providers.
      old_rev_expiry_seconds:
        type: integer
        description: |+
          Placeholder -- to be completed
      password:
        type: string
        description: |+
          Placeholder -- to be completed

          Mode is static.

          Requires dbContext restart
      query_pagination_limit:
        type: integer
        description: |+
          Placeholder -- to be completed

          Mode is static.
      revs_limit:
        type: integer
        description: |+
          This property defines the maximum depth to which a document's revision tree can grow; its value governs the point at which to prune a document's revision tree.

          The default and minimum values of `revs_limit` are dependent on whether [allow_conflicts](config-properties.html#databases-this_db-allow_conflicts) is set True or False -- see the *Default and Minimum Values* table below.

          The process to remove obsolete revisions is called pruning and runs automatically every time a revision is added. Although fundamentally the same, the pruning algorithm works slightly differently between Sync Gateway and Couchbase Lite. On Sync Gateway, the pruning algorithm is applied to the shortest, non-tombstoned branch in the revision tree.

          If there are conflicting revisions, the document may end up with **disconnected branches** after the pruning process. In the animation below, the document has a conflicting branch (revisions `4'` - `1001'`). When the shortest branch (in this case the conflicting branch) reaches the 1003rd update, it gets is cut off. The revision tree is not in a corrupted state and the logic that chooses the winning revision still applies. But it may make it impossible to do certain merges (n-way merge) to resolve conflicts and will occupy disk space that could have been freed if the conflict was resolved early on.<br><br>

          ![](https://cl.ly/3C1G3t3R1v19/pruning-sg.gif)

          If the revision tree gets into this state then the only option to resolve the conflict is to pick a winning branch and tombstone all the non-winning conflicting branches.

          **NOTE:** Setting the `revs_limit` to a value below 100 when `allow_conflicts = true` may adversely affect the conflict resolution process, as there may be insufficient revision history to resolve a given conflict.

          #### Default and Minimum Values

          **For Releases 2.6+**

          allow_conflicts =|+ True |+ False
            :--- |+ :-------: |+ :-------:
          `revs_limit` default |+ 100 |+ 50 |+
          `revs_limit` minimum |+ 20 |+ 1 |+

          **For Releases 2.0 - 2.5**

            allow_conflicts = |+ <-- True --> |+<-- False -->
            :--- |+ :-------: |+ :-------:
            `revs_limit` default  |+ 100 |+ 1000
            `revs_limit` minimum  |+ 50 |+ 1

          **For Release 1.x**
          - `revs_limit` default = 1000
          - `revs_limit` minimum = 20

          See also:
          - Sync Gateway purge endpoint [/{db}/_purge](admin-rest-api.html#/document/post__db___purge).
          - Sync Gateway [document TTLs](admin-rest-api.html#/document/put__db___doc_).

          minimum -- see Default and Minimum Values table in description

        default: see Default and Minimum Values table in Description
      send_www_authenticate_header:
        type: boolean
        description: Whether to send WWW-Authenticate header in 401 responses.
        default: 'true'
      serve_insecure_attachment_types:
        type: boolean
        default: 'false'
        description: If an attachment has headers such as "text/html" where it would attempt to render in a browser Sync Gateway will force a download by sending content-disposition header. Setting this option to false will instead not set the content-disposition and allow a browser to render the attachment.
      session_cookie_http_only:
        type: boolean
        default: 'false'
        description:  This flag disallows cookies from being used by Javascript; by default javascript CAN use them
      session_cookie_name:
        type: string
        description: |+
          Starting in Sync Gateway 2.0, it is possible to customize the session cookie name that is used for this database. This configuration property is primarly used for web applications interacting with multiple Sync Gateway **databases**. Browsers typically have two methods of determining which cookie to use for a given request: the `URL` path or cookie name. With this property, you can use different cookie names for each database specified in the configuration file. Let's consider the following configuration file:

          ```json
          {
              "interface":":4984",
              "log":["*"],
              "databases": {
                "db1": {
                  "session_cookie_name": "CustomName1",
                  "server": "http://localhost:8091",
                  "bucket": "bucket-1",
                  "users": {
                      "user_1": {"password":"1234"}
                  },
                  "db2": {
                    "session_cookie_name": "CustomName2",
                    "server": "http://localhost:8091",
                    "bucket": "bucket-2",
                    "users": {
                        "adam_2": {"password":"5678"}
                    }
                  }
                }
              }
          }
          ```

          With this configuration, the `Set-Cookie` response header of the POST `:4984/{db}/_session` endpoint (Public REST API) would then have the form "CustomName1=3cad4b95524179bf144fe0d92b8f09877bb86bf5;path=/db1/".

          When using POST `:4985/{db}/_session` (Admin REST API) to create a session, the cookie value is returned in the response body instead of the `Set-Cookie` header. In this case, it could also be set by the client, for web applications it would be the following in JavaScript:

          ```javascript
          cookie1String = "CustomName1=3cad4b95524179bf144fe0d92b8f09877bb86bf5;path=/db1/";
          document.cookie = cookie1String;
          ```
        default: 'SyncGatewaySession'
      session_cookie_secure:
        type: boolean
        default: 'true'
        description: |+
          Override secure cookie flag (that is, disable secure cookies).

          If SSLCert is set, then secure cookies are also used by default. However, this flag can be set `false` to override this behavior and allow insecure cookies to be used alongside SSL.

          If SSLCert is not set then this flag defaults to false.

      slow_query_warning_threshold:
        type: integer
        default: 500
        description: |+
          The maximum wait time, in milliseconds,for N1QL or View queries made by Sync Gateway

          Log warnings if the run time of a N1QL or View query, made by Sync Gateway, exceeds this value.

      sync:
        $ref: "#/definitions/Sync Function"

      unsupported:
        type: object
        properties:
          api_endpoints:
            type: object
            description: to be completed
            properties:
              enable_couchbase_bucket_flush:
                type: boolean
                description: to be completed
          oidc_tls_skip_verify:
            type: boolean
            default: 'false'
            description: |+
              Unsupported option for use in development and testing environment ONLY

              `oidc_tls_skip_verify` can be used to skip validation of TLS certs used for OpenID Connection testing.

              NOTE: Due to the unsupported nature of this option, there is no guarantee on its continued availability.
          oidc_test_provider:
            type: object
            description: to be completed
            properties:
              enabled:
                type: boolean
                description: to be completed
          remote_config_tls_skip_verify:
            type: boolean
            default: 'false'
            description: |+
              Unsupported option for use in development and testing environment ONLY

              NOTE: Due to the unsupported nature of this option, there is no guarantee on its continued availability.
          sgr_tls_skip_verify:
            type: boolean
            default: 'false'
            description: |+
              Unsupported option for use in development and testing environment ONLY

              `sgr_tls_skip_verify` can be used to skip validation of TLS certs used for Inter-Sync Gateway Replication.

              NOTE: Due to the unsupported nature of this option, there is no guarantee on its continued availability.
          user_views:
            type: object
            description: to be completed
            default: 'none'
            properties:
              user_views_enabled:
                type: boolean
                description: to be completed
          warning_thresholds:
            type: object
            description: to be completed
            properties:
              access_and_role_grants_per_doc:
                type: boolean
                description: to be completed
              channels_per_doc:
                type: boolean
                description: to be completed
              xattr_size_bytes:
                type: boolean
                description: to be completed
          disable_clean_skipped_query:
            type: boolean
            description: to be completed
      use_views:
        type: boolean
        description: |+
          If set to `true`, Sync Gateway will use views instead of GSI for system functions like authentication and replication.
        default: 'false'
      user_xattr_key:
        type: string
        default: none
        description: |+
          The ```user_xattr_key``` identifies the user xattr used to hold the channel access grants for documents in this database.
          If it is not specified or its value is spaces or null then no `user_xattr_key` will be used.

          This feature is not enabled by default.

          If you change the value of this key, no existing grant assignments will be changed until a document mutation is triggered.
          This can be done in a number of ways:
          - a mutation to the document which we’ll see via DCP
          - an on-demand import either through write or get
          - by using the resync function.


          *Dependencies:*
            The `user_xattr_key` feature requires that --
            - `enable_shared_bucket_access` be = `true`
            - xattrs be supported on the connected Couchbase Server

            Mode is static.
      username:
        type: string
        description: |+
          The RBAC user's username for authenticating to Couchbase Server. There is no default.

          Mode is static.

          Requires dbContext restart
      view_query_timeout_secs:
        type: integer
        description: |+
          The view query timeout in seconds. This property allows you to specify the time Sync Gateway should wait for a view query response from Couchbase Server before it times out. The timeout is used for both view and N1QL queries issued by Sync Gateway.
        default: 75


definitions:
  Import Filter:
    type: object
    description: some text
    properties:
      import_filter:
        type: string
        description: |+
          Provide the JavaScript filter function used to determine whether a document written to the Couchbase Server bucket is made available to Couchbase Mobile clients (imported).

          The function takes the document body as parameter and must return a boolean to indicate whether the document should be imported or not.

          The function is provided in the API body as raw Javascript.

          ```function(doc) {
                if (doc.type != "mobile") {
                  return false
                }
                return true
              }```

        default: function(doc) {return false;}

  Role:
    type: object
    description: |+
      Definition a Sync Gateway role
    properties:
      name:
        type: string
        description: |+
          Name of the role
      admin_channels:
        type: array
        description: |+
          Array of channel names the role allows access to
        items:
          type: string

  Sync Function:
    type: object
    description: A Javascript function that controls access
    properties:
      sync:
        type: string
        description: |+
          The sync function is a JavaScript function whose source code is stored in the Sync Gateway's database configuration file. Every time a new document, revision or deletion is added to a database, the sync function is called and given a chance to examine the document (see the [Sync Function API guide](./../advance/adv-sgw-cfg-sync-function.html)).

          You should provide the function in the API body as raw Javascript.

          If a document is in conflict there will be multiple current revisions. The default, the "winning" one is the one whose channel assignments and access grants take effect.

          If you don't supply a sync function, Sync Gateway uses the following default sync function:

          ```javascript
          `function (doc, oldDoc) {
              channel(doc.channels);
          }`
          ```

          What this does is: Assign a document to the channels listed in its ```channels``` property -- this value must be a string or an array of strings.

          Since there is no validation, any user can change any document. For this reason, the default sync function is really only useful for experimentation and development.

          The `channels` property is an array of strings that contains the names of the channels to which the document belongs.
          If you do not include a `channels` property in a document, the document does not appear in any channels.

          Adding a `channels` property to each document is the easiest way to map documents to channels but if you need more advanced behavior such as read and write access, you'll probably need to write your own Sync Function.

        default: |
          `function(doc, oldDoc) {channel(doc.channels);}`

  User:
    type: object
    description: |+
      Definition of a Sync Gateway user

      Change initiates database restart

    properties:
      name:
        type: string
        description: |+
          The user name (the same name used in the URL path).

          The valid characters for a user name are alphanumeric ASCII characters and the underscore character.

          The name property is required in a POST request.

          You don’t need to include it in a PUT request because the user name is specified in the URL.
      password:
        type: string
        description: |+
          Password of the user.

          Mandatory, unless `allow_empty_password=true`.

      admin_channels:
        type: array
        description: |+
          The channels that the user is able to access.
        items:
          type: string
          description: |+
            Channel name

      admin_roles:
        type: array
        description: |+
          An array of the roles this user is associated with.
        items:
          type: string
          description: Role name

      all_channels:
        type: array
        description: |+
          Shows the channels the user can access, as granted by the sync function.

          This is a read-only property.
          Changes to it are ignored.
        items:
          type: string
          description: Channel name
      email:
        type: string
        description: |+
          Email address of the user.
      disabled:
        type: boolean
        description: |+
          This property is usually not included.

          If the value is `true`, access for the account is disabled and the user will not be able to login.
      roles:
        type: array
        description: |+
          Shows the roles this user is associated with by the sync function.

          This is a read-only property.
          Changes to it are ignored.

        items:
          type: string
          description: Role name

parameters:
  access:
    name: access
    in: query
    description: Indicates whether to include in the response a list of what access this document grants (i.e. which users it allows to access which channels.) This option may only be used from the admin port.
    type: boolean
    default: false
  active_only:
    name: active_only
    in: query
    description: Default is false. When true, the changes response doesn't include either deleted documents, or notification for documents that the user no longer has access to.
    type: boolean
    default: false
  attachment:
    in: path
    name: attachment
    description: Attachment name. This value must be URL encoded. For example, if the attachment name is `blob_/avatar`, the path component passed to the URL should be `blob_%2Favatar` (tested with [URLEncoder](https://www.urlencoder.org/)).
    type: string
    required: true
  attachments:
    in: query
    name: attachments
    description: Default is false. Include attachment bodies in response.
    type: boolean
    default: false
  atts_since:
    name: atts_since
    in: query
    description: Include attachments only since specified revisions. Does not include attachments for specified revisions.
    type: array
    items:
      type: string
    required: false
  body:
    name: body
    in: body
    description: The request body
    schema:
      type: string
      format: binary
  bulkget:
    in: body
    name: BulkGetBody
    description: |+
      List of documents being requested.

      Each array element is an object that *must* contain an `id` property giving the document ID.

      It may also contain
      - a `rev` property if a specific revision is desired.
      - an `atts_since` property (as in a single-document GET) to limit which attachments are sent.
    schema:
      type: object
      properties:
        docs:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                description: Document ID.
  channels:
    in: query
    name: channels
    description: Indicates whether to include in the response a channels property containing an array of channels this document is assigned to. (Channels not accessible by the user making the request will not be listed.)
    type: boolean
    default: false
  channels_list:
    in: query
    name: channels
    description: A comma-separated list of channel names. The response will be filtered to only documents in these channels. (This parameter must be used with the **sync_gateway/bychannel** filter parameter; see below.)
    type: string
    required: false
  content_type:
    in: header
    name: Content-Type
    description: Attachment Content-Type
    type: string
  db:
    name: db
    in: path
    description: Database name
    type: string
    required: true
  db-local:
    name: db
    in: path
    # summary: Local database
    description: Name of the local database
    type: string
    required: true
  ddoc:
    name: ddoc
    in: path
    description: Design document name
    type: string
    required: true
  descending:
    name: descending
    in: query
    description: Default is false. Return documents in descending order.
    type: boolean
    required: false
  doc:
    name: doc
    in: path
    description: Document ID
    type: string
    required: true
  doc_ids:
    in: query
    name: doc_ids
    description: A list of document IDs as a valid JSON array. The response will be filtered to only documents with these IDs. This parameter must be used with the `filter=_doc_ids` and `feed=normal` parameters.
    type: array
    items:
      type: string
  endkey:
    name: endkey
    in: query
    description: If this parameter is provided, stop returning records when the specified key is reached.
    type: string
    required: false
  feed:
    in: query
    name: feed
    description: Default is 'normal'. Specifies type of change feed. Valid values are normal, continuous, longpoll, websocket.
    type: string
    default: 'normal'
  group:
    in: query
    name: group
    description: Group the results using the reduce function to a group or single row.
    type: boolean
    default: false
  group_level:
    in: query
    name: group_level
    description: Specify the group level to be used.
    type: integer
    required: false
  heartbeat:
    in: query
    name: heartbeat
    description: Default is 0. Interval in milliseconds at which an empty line (CRLF) is written to the response. This helps prevent gateways from deciding the socket is idle and closing it. Only applicable to longpoll or continuous feeds. Overrides any timeout to keep the feed alive indefinitely. Setting to 0 results in no heartbeat.
    type: integer
    default: 0
  include_docs:
    in: query
    name: include_docs
    description: Default is false. Indicates whether to include the associated document with each result. If there are conflicts, only the winning revision is returned.
    type: boolean
    default: false
  keys:
    in: query
    name: keys
    description: |
      Specify a list of document IDs.
      Note that this is an array field, so to retrieve docs with Ids of "keyid1" and "keyid4", for example, use a request in this format --

      ```curl -X GET \ 'http://localhost:4985/test_db/_all_docs?keys=[%22keyid1%22,%22keyid4%22]' \ -H 'Accept: application/json'```
    type: array
    items:
      type: string
    required: false
  limit:
    in: query
    name: limit
    description: Limits the number of result rows to the specified value. Using a value of 0 has the same effect as the value 1.
    type: integer
  local_doc:
    in: path
    name: local_doc
    description: Local document IDs begin with _local/.
    type: string
    required: true
  new_edits:
    name: new_edits
    in: query
    description: Default is true. Setting this to false indicates that the request body is an already-existing revision that should be directly inserted into the database, instead of a modification to apply to the current document. (This mode is used by the replicato.) This option must be used in conjunction with the `_revisions` property in the request body.
    type: boolean
    default: true
  open_revs:
    name: open_revs
    in: query
    description: |
      Option to fetch specified revisions of the document. The value can be `all` to fetch all leaf revisions or an array of revision numbers (i.e. open_revs=["rev1", "rev2"]). Only [leaf revision](glossary.html) bodies that haven't been pruned are guaranteed to be returned.

      If this option is specified the response will be in multipart format. Use the `Accept: application/json` request header to get the result as a JSON object.
    type: array
    items:
      type: string
    required: false

  replication__replication-body:
    in: body
    name: ReplicationBody
    # summary: Basic replication body (json)
    description: |+
      This replication request message body is a JSON document that comprises all the properties required to upsert a replication.

      If the `replicationID` matches an existing `replication_id` then the values of any properties provided in the body are used to update the existing replication's property values.
    schema:
      type: object
      properties:
        # changes_feed_limit:
        #   type: integer
        #   default: 50
        #   description: |+
        #     The **changes_feed_limit** property is now deprecated.
        #     It was previously used to define the maximum number of change entries pulled in each loop of a continuous changes feed.

        #     NOTE -- Removed. This item is replaced by the 'perf-tuning-params' at version 2.8.

        adhoc:
          type: boolean
          default: false
          description: |+
            **About**

            Use the Admin REST API's `adhoc` parameter to specify that a replication is ad hoc rather than persistent.

            **Behavior**

            Ad hoc replications behave the same as normal replications, but they are automatically removed when their status changes to stopped.
            This will usually be on completion, but may also be as a result of user action.

            **Constraints**

            This parameter is **NOT** available to configured replications; only those initialized using the Admin REST API.

        batch_size:
          type: integer
          default: 200
          description: |+
            **About**

            Use the optional `batch_size` property to specify the number of changes to be included in a single batch during replication.

        cancel:
          type: boolean
          default: false
          description: |+
            **About**

            Use this parameter on,y when you want to want to cancel an existing active replication.

            **Constraints**

            - This parameter is **NOT** available in configured replications; only those initialized using the Admin REST API.
            - **NOTE** that the body of the request must be the same as the replication's replication definition for the cancellation request to be honoured.
            For example, if you requested continuous replication, the cancellation request must also contain the continuous field.

        conflict_resolution_type:
          type: string
          default: default
          description: |+
            **About**

            The **`conflict_resolution_type`** property defines the conflict resolution policy that Sync Gateway applies when resolving conflicting revisions.

            The default behavior is that automatic conflict resolution policy is applied.

            **Valid options**
              - `default`
              - `localWins`
              - `remoteWins`
              - `custom`

            **Behavior**

            - *default* -- Selecting `default` applies the following conflict resolution policy
              - Deletes always win (the delete with longest revision history wins if both revisions are deletes)
              - The revision with the longest revision history wins (so, the one with most changes and consequently the highest revision Id).

            - *localWins* -- Selecting `localWins` will result in local revisions always being the winner in any conflict.
            - *remoteWins* -- Selecting `remoteWins` will result in remote revisions always being the winner in any conflict.


            - *custom* -- Selecting `custom` specifies that you want to handle conflict resolution with your own application logic. You **must** provide this logic as a Javascript function by specifying it in using the custom-conflict-resolver parameter.

            **Example**
            ```
            "conflict_resolution_type":"remoteWins"
            ```

            **Constraints**

            - replications created prior to version 2.8 will default to `default`.


        continuous:
          type: boolean
          default: false
          description: |+
            **About**

            The `continuous` property specifies whether this replication will run in continuous mode.

            **Behavior**

            - `continuous=true`-- In continuous mode, changes are immediately synced in accordance with the replication definition.
            - `continuous=false`-- Detected changes are synced in accordance with the replication definition. The replication ceases once all revisions are processed.

            **Constraints**

            - Optional for stops and removes

        custom_conflict_resolver:
          type: string
          default: none
          description: |+
            **About**

            The optional `custom_conflict_resolver` property specifies the Javascript function that will be used to resolve conflicts, if the custom conflict resolution type is specified in the `conflict_resolution_type`.

            **Options**

            The property is *mandatory* when `conflict_resolution_type=custom` and will be ignored in all other cases.

            **Using**

            Provide the required logic in a Javascript function, as a string within backticks (see also the description for the `sync` function`.

            The function takes one parameter `struct` representing the conflict and comprising
            - the document id
            - the local document
            - the remote document

            The function returns a document `struct` representing the winning revision.

            **Example**
            ```
            "custom_conflict_resolver":`
              function(conflict) {
                console.log("full remoteDoc doc: "+JSON.stringify(conflict.RemoteDocument));
              return conflict.RemoteDocument;
            }`
            ```

            **Constraints**

            Using complex `custom_conflict_resolver` functions can noticeably degrade performance. Use a built-in resolver whenever possible.

        direction:
          type: string
          description: |+
            **About**

            The mandatory `direction` property specifies whether the replication is *push*, *pull* or *pushAndPull* relative to this node.

            The property value is referenced by the [remote](rest-api-admin.html#database-this_db-replications-remote) property.

            **Behavior**

            - `pull` -- changes are pulled from the `remote` database
            - `push` -- changes are pushed to the `remote` database
            - `pushAndPull` -- changes are both pushed-to and pulled-from the `remote` database

            **Constraints**

            Replications created prior to version 2.8 derive their *direction* from the source/target url of the replication.

        enable_delta_sync:
          type: boolean
          default: false
          description: |+
            **About**

            The optional `enable_delta_sync` parameter turns on delta sync for a replication.
            It works in conjunction with the database level setting `delta_sync.enabled`.

            **Options**

            - `"enable_delta_sync": true`, the replication can use delta sync (depending on `delta_sync.enabled` setting)
            - `"enable_delta_sync": false`, the replication cannot use delta sync

            **Behavior**

            The optional `enable_delta_sync` parameter works in conjunction with the database level `delta_sync.enabled` setting, to determine whether this replication uses delta sync.

            - **If** `"delta_sync.enabled": true` for both databases involved in the replication, then this parameter enables or disables its use for this specific replication.
            -  In all other cases it has no effect and the replication runs without delta-sync.

            **Constraints**

            - Applies **ONLY** to Enterprise Edition deployments.
            - Depends upon the setting of the database level parameter `delta_sync.enabled`
            - Replications created prior to version 2.8 must run with `"enable_delta_sync": false`
            - Push replications will not use Delta Sync when pushing to a pre-2.8 target
        filter:
          type: string
          description: |+
            **About**

            Use the optional `filter`property to defines the function to be used to filter documents.

            **Options**

            A common value used when replicating from Sync Gateway is `sync_gateway/bychannel`. This option limits the pull replication to a specific set of channels. You can specify the required channels using `query_params`.

            **Behavior**

            Works in conjunction with `query_params` to control the documents processed by the replication.

            **Example**

            ```
            "filter":"sync_gateway/bychannel"
            ```

            **Constraints**

            OPTIONAL for stops and removes (even if defined during creation)


        max_backoff_time:
          type: integer
          default: 5
          description: |+
            The **max_backoff_time**property specifies the time-period (in minutes) during which Sync Gateway will attempt to reconnect lost or unreachable *remote* targets.

            On disconnection, Sync Gateway will do an exponential backoff up to the specified value, after which it will attempt to reconnect indefinitely every *max_backoff_time* minutes.

            If a zero value is specified, then Sync Gateway will do an exponential backoff up to an interval of five minutes before stopping the replication.

            NOTE -- this value defaults to five minutes for replications created prior to version 2.8.

        password:
          type: string
          default: mandatory
          description: |+
            **About**

              Use `password` to provide the login password value for the accredited user running this replication.

            **Behavior**

              These details are used to authenticate credentials and approve access to data.

              Once provided and recorded, the password data is redacted and will not be displayed in either the configuration file or Admin REST API. A string of `****` will be displayed in its place.

        perf_tuning_params:
          type: array
          description: |+
            The perf_tuning_params are not available in this release.

            NOTE -- This property replaces the 'changes_feed_limit' at version 2.8
          items:
            type: string

        purge_on_removal:
          type: boolean
          default: false
          description: |+
            **About**

            The optional `purge_on_removal` property specifies, per replication, whether the removal of a `channel` triggers a purge.

            **Options**
            - `true` or `false`
            - Default = false -- manage removals are ignored by receiving end

            **Behavior**

            If `purge_on_removal=false`, then the removal of channels is ignored (not purged) by the receiving end.

            **Constraints**

            Replications created prior to version 2.8 *must* be run with `purge_on_removal=false`.

        query_params:
          type: array
          description: |+
            **About**

            The `query_params` property defines a set of key/value pairs used in the query string of the replication.

            **Behavior**

            This property works in conjunction with `filters` and `channels` to provide routing.

            **Using**

            You can use `query_params`' *channels* function to *pull* from a specific set of `channels`.
            To do so, you would also need to set the `filter` to  `sync_gateway/bychannels`.

            **Example**

            ```json
              "filter":"sync_gateway/bychannel",
              "query_params": {
                "channels":["channel.user1"]
              },
            ```

            **Constraints**

            OPTIONAL for stops and removes (even if defined during creation)

          items:
            type: string

        remote:
          type: string
          description: |+
            **About**

            The **remote** property represents the endpoint of s database for the remote Sync Gateway.
            That is, it identifies the remote Sync Gateway database that is the subject of this replication's push, pull or pushAndPull action.

            Typically the endpoint will include URI, Port and Database name elements.

            **Format**

            - a string containing a valid URL for a (remote) Sync Gateway database.
            - an object whose url property contains the Sync Gateway database URL.

            **Behavior**

              Dependent upon setting of **direction**.

              If **direction** is :
              - *pull*, 'remote' defines the remote cluster *from* which data is pulled
              - *push*, 'remote' defines the remote cluster *to* which data is pushed
              - *pushAndPull*, 'remote' defines the *push* configuration.

            **Example**

            ```json
            "remote": "http://www.example.com:4984/sample-database",
            ```

        replication_id:
          type: string
          description: |+
            **About**

            The *replication_id* property specifies either:
            - For NEW replications, the ID to be assigned to the the replication. If no *replication_id* is specified, Sync Gateway will assign a random UUID to new replications.
            - For existing replications, this is the ID of the required replication.
            - If **cancel=true**, this is the id of the active replication task to be cancelled.

            **Constraints**

            If this is specified in the body of a POST or PUT request then it must be the same value as specified in the request URL.


        initial_state:
          type: string
          default: Running
          description: |+
            **About**

            The optional `initial_state` property is used to specify that the replication must be launched in 'Stopped' mode

            **Behavior**

            All replications are configured to start on Sync Gateway launch. So, if omitted, the state defaults to 'Running'.

            **Constraints*

            Replications created prior to version 2.8 will all default to a state of 'Running'.

        username:
          type: string
          default: Mandatory
          description: |+
            **About**

            Use `username` to provide the name of the accredited user running this replication.

            **Behavior**

            These details are used to authenticate credentials and approve access to data

            Once provided and recorded, the username data is redacted and will not be displayed in either the configuration file or Admin REST API. A string of `****` will be displayed in its place.


# END: Define sync-gateway replications
#




  # replication_id:
  #   in: path
  #   type: string
  #   name: replicationID
  #   description: If supplied, the **replicationID** parameter must be a valid replication id. If it is not supplied for a *new replication*, then a random UUID is generated.

  replication_id-upsert:
    in: path
    type: string
    name: replicationID
    required: true
    description: |+
      <p>If supplied, the <i>replicationID</i> parameter must be a valid replication id.</p>
      <p>If it is not supplied for a <i>new</i> replication*, then a random UUID is generated.</p>

  # replication_id-get:
  #   in: path
  #   type: string
  #   name: replicationID
  #   description: |+
  #     The *replicationID* parameter specifies the required replication.

  # replication_id-delete:
  #   in: path
  #   type: string
  #   name: replicationID
  #   description: |+
  #     The *replicationID* parameter specifies the replication to be deleted.

  replication_id-required:
    in: path
    type: string
    name: replicationID
    required: true
    description: |+
      The {replicationID} parameter identifies the target replication.

  replicationStatus-action:
    in: query
    name: action
    type: string
    default: none
    required: true
    description: |+
      The value of the {action} parameter specifies the value you want the selected replication's status set to.

      <p>Valid values are:</p>

      - **start** : Use this action to start a stopped replication
      - **stop** : Use this action to stop a started replication
      - **reset** : Use this action to reset a stopped replication. This will set the checkpoint to zero. For bidirectional replication, both push and pull checkpoints are reset to zero.
  rev:
    name: rev
    in: query
    description: Revision identifier of the parent revision the new one should replace. (Not used when creating a new document.)
    type: string
    required: false
  rev_get:
    name: rev
    in: query
    description: Revision identifier of the revision to get. By default, Sync Gateway returns the current revision. This parameter is generally only needed for conflict resolution. For example where the app might need to retrieve a conflicting leaf revision that isn't the current revision.
    type: string
    required: false
  rev_put:
    name: rev
    in: query
    description: Revision identifier of the revision to update. It must be the last revision in the history.
    type: string
    required: true
  rev_delete:
    name: rev
    in: query
    description: Revision identifier of the revision to delete. It must be the identifier of the latest revision in the history.
    type: string
    required: true
  revs:
    in: query
    name: revs
    description: Default is false. Indicates whether to include a _revisions property for each document in the response, which contains a revision history of the document. The length of the returned revision tree can be specified with the `revs_limit` querystring parameter.
    type: boolean
    default: false
  role:
    in: body
    name: role
    description: The message body is a JSON document that contains the following objects.
    schema:
      $ref: '#/definitions/Role'

  role_name:
    in: path
    name: name
    description: |+
      Role name, may contain any combination of the characters `[a-z A-Z 0-9 - + . @ %]`, when creating a role any other characters must be percent encoded, see: [https://en.wikipedia.org/wiki/Percent-encoding](https://en.wikipedia.org/wiki/Percent-encoding).

      When passing a role name in a URL path it must be escaped again using percent encoding e.g. if a role is created with the name "0|59", the '|' character must first be percent-encoded resulting in "0%7C59". When using the same role name in a URL path it must be percent-encoded a second time resulting in "0%257C59"
    type: string
    required: true

  since:
    in: query
    name: since
    description: Starts the results from the change immediately after the given sequence ID. Sequence IDs should be considered opaque; they come from the last_seq property of a prior response.
    type: integer
    required: false

  style:
    in: query
    name: style
    description: Default is 'main_only'. Number of revisions to return in the changes array. main_only returns the current winning revision, all_docs returns all leaf revisions including conflicts and deleted former conflicts.
    type: string
    default: 'main_only'
  timeout:
    in: query
    name: timeout
    description: Default is 300000. Maximum period in milliseconds to wait for a change before the response is sent, even if there are no results. Only applicable for longpoll or continuous feeds. Setting to 0 results in no timeout.
    type: integer
    default: 300000
  update_seq:
    in: query
    name: update_seq
    description: Default is false. Indicates whether to include the update_seq (document sequence ID) property in the response.
    type: boolean
    default: false
  view:
    name: view
    in: path
    description: View name
    type: string
    required: true
  batch:
    in: query
    name: batch
    description: Stores the document in batch mode. To use, set the value to ok.
    type: string
    required: false
  changes_body:
    in: body
    name: ChangesBody
    description: The request body
    schema:
      properties:
        limit:
          description: Limits the number of result rows to the specified value. Using a value of 0 has the same effect as the value 1.
          type: integer
        style:
          description: Default is 'main_only'. Number of revisions to return in the changes array. The only possible value is all_docs and it returns all leaf revisions including conflicts and deleted former conflicts.
          type: string
          default: 'main_only'
        active_only:
          description: Default is false. When true, the changes response doesn't include either deleted documents, or notification for documents that the user no longer has access to.
          type: boolean
          default: false
        include_docs:
          description: Default is false. Indicates whether to include the associated document with each result. If there are conflicts, only the winning revision is returned.
          type: boolean
          default: false
        filter:
          description: Indicates that the returned documents should be filtered. The valid values are sync_gateway/bychannel and _doc_ids.
          type: string
        channels:
          description: A comma-separated list of channel names. The response will be filtered to only documents in these channels. (This parameter must be used with the sync_gateway/bychannel filter parameter; see below.)
          type: string
        doc_ids:
          description: A list of document IDs as a valid JSON array. The response will be filtered to only documents with these IDs. (This parameter must be used with the _doc_ids filter parameter; see below.)
          type: array
          items:
            type: string
        feed:
          description: Default is 'normal'. Specifies type of change feed. Valid values are normal, continuous, longpoll, websocket.
          type: string
          default: 'normal'
        since:
          description: Starts the results from the change immediately after the given sequence ID. Sequence IDs should be considered opaque; they come from the last_seq property of a prior response.
          type: object
        heartbeat:
          description: Default is 0. Interval in milliseconds at which an empty line (CRLF) is written to the response. This helps prevent gateways from deciding the socket is idle and closing it. Only applicable to longpoll or continuous feeds. Overrides any timeout to keep the feed alive indefinitely. Setting to 0 results in no heartbeat.
          type: integer
          default: 0
        timeout:
          description: Default is 300000. Maximum period in milliseconds to wait for a change before the response is sent, even if there are no results. Only applicable for longpoll or continuous feeds. Setting to 0 results in no timeout.
          type: integer
          default: 300000
  filter:
    in: query
    name: filter
    description: Indicates that the reported documents should be filtered. The valid values are sync_gateway/bychannel and _doc_ids.
    type: string
    required: false
  logtags:
    in: body
    name: log_keys
    description: |
      Use the body to provide a list of the log keys you want to set.

      For example -- `{"Changes++":true, "Cache":true, "HTTP":true, "DCP":true, "WS": true, "WSFrame": true, "Replicate": true}`
    schema:
      type: object
      properties:
        All:
          type: boolean
          description: |
            Use the wildcard character `*` to set all log keys
            For example ```{"*":true}```
        none:
          type: boolean
          description: |
            Use "none" or "" as the key to disable all log keys.
            For example ```{"none":true}```
        Admin:
          type: boolean
          description: Admin processes in Sync Gateway.
        Access:
          type: boolean
          description: Anytime an access() call is made in the sync function.
        Auth:
          type: boolean
          description: Authentication.
        Bucket:
          type: boolean
          description: Sync Gateway interactions with the bucket (trace level only).
        Cache:
          type: boolean
          description: Interactions with Sync Gateway's in-memory channel cache.
        Changes:
          type: boolean
          description: Processing of /{db}/_changes requests.
        CRUD:
          type: boolean
          description: Updates made by Sync Gateway to documents.
        DCP:
          type: boolean
          description: DCP-feed processing.
        Events:
          type: boolean
          description: Event processing (webhooks).
        gocb:
          type: boolean
          description: All logging emitted by the GoCB SDK
        HTTP:
          type: boolean
          description: All requests made to the Sync Gateway REST APIs.
        HTTP+:
          type: boolean
          description: Additional information about HTTP requests (response times, status codes).
        Import:
          type: boolean
          description: Introduced in Sync Gateway 1.5 to help troubleshoot the import process of a document (this is the Sync Gateway process to make a document that was added through N1QL or the Server SDKs mobile-aware). This log key can be useful to troubleshoot why a given document was not successfully imported.
        Javascript:
          type: boolean
          description: All logging from Javascript. This includes -- sync function, import filters, webhook filter function, and the custom ISGR conflict resolvers
        Migrate:
          type: boolean
          description: Logs messages thhat show when old inline document metdata is upgraded to xattrs
        Query:
          type: boolean
          description: Query is used for Sync Gateway code related to N1QL queries
        Replicate:
          type: boolean
          description: |
            Log messages related to replications between Sync Gateways (using sg-replicate). This tag cannot be used for replications initiated by Couchbase Lite.
        SGCluster:
          type: boolean
          description: Log messages related to the sharded import and HA sg-replicate
        Sync:
          type: boolean
          description: Activity which relates to synchronization between Couchbase Lite and Sync Gateway
        SyncMsg:
          type: boolean
          description: Can be used for additional Sync logging output
        WS:
          type: boolean
          description: Websocket replication log messages
        WSFrame:
          type: boolean
          description: Can be used for additional WS logging output
  level:
    in: query
    name: level
    description: |
      **Deprecated** -- please use `logLevel` instead
      This setting determines the verbosity of the logging
      -- level=1 - The default, regular, logging
      -- level=2 - Enables warnings and panics logging
      -- level=3 - Will log panics only
    type: integer
  logLevel:
    in: query
    name: logLevel
    description: |
      This setting determines the verbosity of the logging.

      Available values are
      -- `none`
      -- `error`
      -- `warn`
      -- `info`
      -- `debug`
      -- `trace`

      Note that the setting is additive. For example, setting `info` will also enable both `error` and `warn`.

    type: string
  sgcollect_info:
    in: body
    name: sgcollect_info
    description: Options that can be specified to use in an sgcollect_info run
    schema:
      type: object
      properties:
        redact_level:
          type: string
          description: Can be set to `none` or `partial` for redaction of collected logs.
          default: none
        redact_salt:
          type: string
          description: If set, use this salt when redacting logs.
        output_dir:
          type: string
          description: Where to store the collected zip.
          default: configured `LogFilePath` location (e.g. `/home/sync_gateway/logs`)
        upload:
          type: boolean
          description: Whether to upload the collected logs.
          default: false
        upload_host:
          type: string
          description: s3 URL for upload.
          default: https://uploads.couchbase.com
        customer:
          type: string
          description: |+
            Customer name to use when uploading logs.
            required -- if upload is set
        ticket:
          type: string
          description: Zendesk ticket number to use when uploading logs.
  name:
    in: path
    name: name
    description: |
      User's name, may contain contain any combination of the characters `[a-z A-Z 0-9 - + . @ %]`, when creating a user any other characters must be percent encoded, see: [https://en.wikipedia.org/wiki/Percent-encoding](https://en.wikipedia.org/wiki/Percent-encoding).

      When passing a user name in a URL path it must be escaped again using percent encoding e.g. if a user is created with the name "0|59", the '|' character must first be percent-encoded resulting in "0%7C59". When using the same user name in a URL path it must be percent-encoded a second time resulting in "0%257C59"
    type: string
    required: true
  replicate__replication-body:
    in: body
    name: ReplicationBody
    description: The request message body is a JSON document that contains the following objects.
    schema:
      type: object
      properties:
        source:
          type: string
          description: Identifies the database to copy revisions from. Can be a string containing a local database name or a remote database URL, or an object whose url property contains the database name or URL. Also an object can contain headers property that contains custom header values such as a cookie.
        target:
          type: string
          description: Identifies the database to copy revisions to. Same format and interpretation as source.
        continuous:
          type: boolean
          description: Specifies whether the replication should be in continuous mode.
        filter:
          type: string
          description: Indicates that the documents should be filtered using the specified filter function name. A common value used when replicating from Sync Gateway is sync_gateway/bychannel to limit the pull replication to a set of channels.
        query_params:
          type: object
          description: A set of key/value pairs to use in the querystring of the replication. For example, the channels field can be used to pull from a set of channels (in this particular case, the filter key must be set for the channels field to work as expected).
        replication_id:
          type: string
          description: If the cancel parameter is true then this is the id of the active replication task to be cancelled, otherwise this is the replication_id to be used for the new replication. If no replication_id is given for a new replication it will be assigned a random UUID.

        cancel:
          type: boolean
          description: Indicates that a running replication task should be cancelled, the running task is identified by passing its replication_id or by passing the original source and target values.
        changes_feed_limit:
          type: integer
          description: The maximum number of change entries to pull in each loop of a continuous changes feed.
          default: 50
  revs_limit:
    in: query
    name: revs_limit
    description: The number of revisions to include in the response from the document history. This parameter is only honoured if the `revs=true` querystring parameter is also sent in the request. If `revs=true` is specified and `revs_limit` isn't, the full revision history is returned.
    type: integer
    required: false
  show_exp:
    in: query
    name: show_exp
    description: Whether to show the _exp property in the response.
    type: boolean
    default: false
    required: false
  user:
    in: body
    name: body
    description: Request body
    schema:
      $ref: '#/definitions/User'


responses:

  '200':
    description: OK
    # type: object
    schema:
      properties:
        id:
          type: string
          description: Document identifier
        rev:
          type: string
          description: Revision identifier
        ok:
          type: boolean
          description: Indicates whether the operation was successful

  '200-db-config':
    description: OK
    # type: object
    schema:
      $ref: '#/definitions/Database-configuration'

  '200-import-filter':
    description: OK
    # type: object
    schema:
      $ref: '#/definitions/Import Filter'

  '200-role':
    description: OK
    # type: object
    schema:
      $ref: '#/definitions/Role'

  '200-sync':
    description: OK
    # type: object
    schema:
      $ref: '#/definitions/Sync Function'

  '200-user':
    description: OK
    # type: object
    schema:
      $ref: '#/definitions/User'

  '200-db-info':
    description: OK
    # type: object
    schema:
      type: object
      description: Database Information
      properties:
        db_name:
          type: string
          description: Name of the database
        db_uuid:
          type: integer
          description: Database identifier
        disk_format_version:
          type: integer
          description: Database schema version
        disk_size:
          type: integer
          description: Total amount of data stored on the disk (in bytes)
        instance_start_time:
          type: string
          description: Date and time the database was opened (in microseconds since 1 January 1970)
        state:
          type: string
          description: The state of the specified database. Possible values are 'Online' and 'Offline'. A database can be taken offline and brought back online using the /{db}/_offline and /{db}/_online endpoints on the Admin REST API.
        update_seq:
          type: string
          description: Number of updates to the database
