# https://issues.couchbase.com/browse/DOC-6464
# https://docs.google.com/document/d/13E6JOq8u_AaUd_t8FZEPCAuq7jfkjryecjBQBHE3pG8/edit?ts=5e77c903#heading=h.k07058a23ez5# Move replicator settings under `Database' and deprecate 'preH2' settings
#

type: object
properties:
  adminInterface:
    description: Port or TCP network address (IP address and the port) that the Admin REST API listens on. The loopback address prefix before the port (`127.0.0.1`) means the interface will not be reachable from other hosts. To make it reachable, change it to ":4985".
    type: string
    default: '127.0.0.1:4985'
  adminUI:
    description: (**Deprecated**) URL of the Sync Gateway Admin Console HTML page.
    type: string
    default: ':4985/_admin/'
  compressResponses:
    description: Whether to compress HTTP responses. Set to false to disable compression of HTTP responses.
    type: boolean
    default: 'true'
  configServer:
    description: (**Deprecated**) URL of a Couchbase database-configuration server (for dynamic database discovery). A database-configuration server allows Sync Gateway to load a database configuration dynamically from a remote endpoint. If a database configuration server is defined, when Sync Gateway gets a request for a database that it doesn't know about, then Sync Gateway will attempt to retrieve the database configuration properties from the URL ConfigServer/DBname, where DBname is the database name.
    type: string
  CORS:
    description: Configuration object for allowing CORS (cross-origin resource sharing). This is a useful to interact directly with Sync Gateway from HTML 5 applications via XHR.
    type: object
    properties:
      Origin:
        type: array
        description: List of allowed origins; use an asterisk (*) to allow access from everywhere. Note that the asterisk (*) cannot be used if you plan to authenticate users as well (by using the `withCredentials` flag on the client side). In this case, the explicit domain(s) must be specified in the `Origin` and `LoginOrigin` properties of the configuration file.
        items:
          type: string
      LoginOrigin:
        type: array
        description: List of allowed login origins.
        items:
          type: string
      Headers:
        type: array
        description: |
          List of HTTP headers that can be used by domains specified in the `Origin` and `LoginOrigin` properties.

          A common value is `["Content-Type"]` as clients use the `Content-Type: application/json` header when sending data as JSON in the body of POST/PUT requests.
        items:
          type: string
      MaxAge:
        type: integer
        description: Value for the Access-Control-Max-Age header. This is the the number of seconds that the response to a CORS preflight request can be cached before sending another preflight request.
  couchbaseKeepaliveInterval:
    description: TCP keep-alive interval in seconds between Sync Gateway and Couchbase Server.
    type: integer
  databases:
    description: Database settings.
    type: object
    properties:
      this_db:
        type: object
        description: The database name is stored as a key.
        properties:
          allow_conflicts:
            type: boolean
            description: |
              Introduced in Sync Gateway 2.0, this property can be used to disable Sync Gateway's handling of conflicts.

              Setting to `false` will cause Sync Gateway to reject any attempt to write conflicting revisions (returning a `409` HTTP status code). It will be up to the client to resolve the conflict. Restarting Sync Gateway with this property enabled will not automatically result in disk space savings (compaction on a document won't occur until a document is updated).

              Further documentation to use this feature whilst running replications between Sync Gateway instances can be found [here](running-replications.html#limitations).
            default: 'true'
          allow_empty_password:
            type: boolean
            description: Whether Sync Gateway users can be created with empty passwords.
            default: 'false'
          bucket:
            type: string
            description: |
              Bucket name on Couchbase Server. The value **walrus** is **deprecated**.

              The default is the database name.
            default: the database name
          bucket_op_timeout_ms:
            type: integer
            description: |
              Configures how long Sync Gateway should wait for a bucket operation to complete before timing out and trying again. The value can be increased in scenarios where there is a heavy load on Couchbase Server and operations are likely to take more than 2.5 seconds to complete. The default value is 2500 milliseconds.
            default: 2500
          delta_sync:
            type: object
            description: |
              *NOTE:* Delta Sync is an Enterprise Edition feature on Sync Gateway and Couchbase Lite.

              Delta Sync is the ability to replicate only parts of the Couchbase mobile document that have changed. This can result in significant savings in bandwidth consumption as well as throughput improvements, especially when network bandwidth is typically constrained.

              Delta Sync incurs additional bucket storage requirements which can be tuned with the [`rev_max_age_seconds`](#databases-this_db-delta_sync-rev_max_age_seconds) property.

              Delta Sync does not apply to attachment contents.

              Delta Sync is disabled by default on the Sync Gateway. You can enable it through the `enabled` property.

              If delta sync is enabled on Sync Gateway, then Couchbase Lite clients will switch to using delta sync automatically.
              Similarly, if delta sync is disabled on Sync Gateway, clients will switch to normal mode.

              The following configuration example enables delta sync.

              ```javascript
              {
                "logging": {
                  "console": {
                    "log_keys": ["*"]
                  }
                },
                "databases": {
                  "db": {
                    "server": "http://localhost:8091",
                    "bucket": "default",
                    "users": { "GUEST": { "disabled": false, "admin_channels": ["*"] } },
                    "allow_conflicts": false,
                    "revs_limit": 20,
                    "delta_sync": {
                      "enabled": true,
                      "rev_max_age_seconds": 86400
                    }
                  }
                }
              }
              ```

              Foot notes:

              - Delta Sync is automatically enabled for peer-to-peer sync between Couchbase Lite clients.
              - Delta sync is disabled for Couchbase Lite database replicas.
            properties:
              enabled:
                type: boolean
                description: Set this property to "true" to enable delta sync.
                default: 'false'
              rev_max_age_seconds:
                type: integer
                description: |
                  On a write operation, the revision body is backed up in the bucket and retained for `rev_max_age_seconds` to calculate future revision deltas.
                  As a result, new deltas can only be generated for read requests that come in within the `rev_max_age_seconds` time window.
                  The storage of backed up revision bodies for delta sync incurs additional bucket storage requirements.

                  The additional storage can be calculated with the following formula: `(doc_size * updates_per_day * 86400) / rev_max_age_seconds`.

                  For example, with `rev_max_age_seconds`'s default value, an average document size of 4 KB and 100 writes/day, enabling delta sync would take up an additional 400 KB of storage on Couchbase Server (`(4 * 100 * 86400)/86400`).

                  Setting this value to 0 will generate deltas opportunistically on pull replications, with no additional storage requirements.
                default: 86400
          import_docs:
            type: boolean
            description: |
              Introduced in Sync Gateway 1.5, this property specifies whether this Sync Gateway node should perform import processing.

              This property works in conjunction with the [enable_shared_bucket_access](#databases-this_db-enable_shared_bucket_access) property.

              Starting in Sync Gateway 2.7, all Sync Gateway nodes can be configured as import nodes. This results in performance benefits as the import process is shared across all Sync Gateway nodes.

              Prior to version 2.7, `import_docs` can only be set to `true` on a single node.

              #### Workload Isolation

              Starting in version 2.7, if `enable_shared_bucket_access` is set to `true` and `import_docs` is set to `false`, the node will not be participating in the import process.

              This configuration is specifically recommended for workload isolation: to isolate import nodes from the client-facing nodes. Workload isolation is preferable in deployments with a large write throughput.

              Prior to Release 2.1 a value of 'continuous' was also allowed. This was deprecated at Release 2.1 and replaced with the boolean value True. There is no change to the behavior or functionality (that is, a value of 'continuous' was interpreted as True and had the same effect).

            default: false
          import_partitions:
            type: integer
            description: |
              Allows users to tune the number of partitions used for import processing. Partitions are distributed among all Sync Gateway nodes participating in import processing (import_docs:true), and each process a subset of the server's vbuckets.

              Each partition is processed by a separate goroutine, so import_partitions can be used to tune concurrency based on the number of Sync Gateway nodes, and the number of cores per node.
            default: 16

          cacertpath:
            type: string
            description: |
              Relative or absolute path to the root CA certificate to verify the certificate chain and hostname of the Couchbase Server cluster.

              This property is optional for X.509 authentication. If it isn't provided, Sync Gateway will accept any certificate provided by Couchbase Server.
          cache:
            type: object
            description: Database cache configuration.
            properties:
              max_wait_pending:
                type: integer
                description: (Deprecated) Moved to [channel_cache.max_wait_pending](#databases-this_db-cache-channel_cache-max_wait_pending). Maximum wait time in milliseconds for a pending sequence before skipping sequences.
                default: 5000
              max_num_pending:
                type: integer
                description: (Deprecated) Moved to [channel_cache.max_num_pending](#databases-this_db-cache-channel_cache-max_num_pending). Maximum number of pending sequences before skipping the sequence.
                default: 10000
              max_wait_skipped:
                type: integer
                description: (Deprecated) Moved to [channel_cache.max_wait_skipped](#databases-this_db-cache-channel_cache-max_wait_skipped). Maximum wait time in milliseconds for a skipped sequence before abandoning the sequence.
                default: 3600000
              enable_star_channel:
                type: boolean
                description: (Deprecated) Moved to [channel_cache.enable_star_channel](#databases-this_db-cache-channel_cache-enable_star_channel). Enable the star (*) channel.
                default: 'true'
              channel_cache_max_length:
                type: integer
                description: (Deprecated) Moved to [channel_cache.max_length](#databases-this_db-cache-channel_cache-max_length). Maximum number of entries maintained in cache per channel.
                default: 500
              channel_cache_min_length:
                type: integer
                description: (Deprecated) Moved to [channel_cache.min_length](#databases-this_db-cache-channel_cache-min_length). Minimum number of entries maintained in cache per channel.
                default: 50
              channel_cache_expiry:
                type: integer
                description: (Deprecated) Moved to [channel_cache.expiry_seconds](#databases-this_db-cache-channel_cache-expiry_seconds). Time (seconds) to keep entries in cache beyond the minimum retained.
                default: 60
              channel_cache:
                type: object
                description: |
                  Channel cache configuration
                properties:
                  compact_high_watermark_pct:
                    type: integer
                    description: |
                      High watermark for channel cache eviction (percent).

                      When the cache size, determined by `max_number`, reaches the high watermark, the eviction process iterates through the cache to remove inactive channels.
                    default: 80
                  compact_low_watermark_pct:
                    type: integer
                    description: |
                      Low watermark for channel cache eviction (percent).

                      When the cache size, determined by `max_number` returns to a value lower than `compact_low_watermark_pct`, the cache eviction process is stopped.
                    default: 60
                  max_number:
                    type: integer
                    description: |
                      Tuning this property is an [Enterprise Edition](https://www.couchbase.com/products/editions) feature.
                      The Community Edition is configured with the default value, and will ignore any value in the configuration file.

                      Maximum number of channel caches which will exist at any one point. This property is used to determine the cache size (and the associated eviction watermarks `compact_low_watermark_pct`/`compact_high_watermark_pct`).

                      The default value for this property is 50000. Along with the default channel `min_length` and `max_length` values, this would result in a memory usage under 1GB.

                      The `max_number` value can be tuned to optimize for cache hits (requests that are handled using the cache), as opposed to cache misses (requests that require a round-trip to Couchbase Server to fetch data). The cache hit/miss ratio can be obtained with the following:

                      cache hit/miss ratio = `cache.chan_cache_hits` / `cache.chan_cache_misses`

                      Increasing the `max_number` value can increase the cache hit/miss ratio, resulting in better cache utilization.

                      If the cache size grows to reach the high watermark (`compact_high_watermark_pct`), channels with no connected replications will be evicted before channels which are associated with an active pull replication (i.e a blip-based pull replication in Couchbase Lite 2.x, or an active `/{db}/_changes` request in Couchbase Lite 1.x).

                      The minimum allowed value is 100.

                      It isn't possible to remove the limit altogether, users who wish to remove the limit would need to set `max_number` to an arbitrarily high value.
                    default: 50000
                  max_wait_pending:
                    type: integer
                    description: |
                      Maximum wait time in milliseconds for a pending sequence before skipping sequences.
                    default: 5000
                  max_num_pending:
                    type: integer
                    description: |
                      Maximum number of pending sequences before skipping the sequence.
                    default: 10000
                  max_wait_skipped:
                    type: integer
                    description: |
                      Maximum wait time in milliseconds for a skipped sequence before abandoning the sequence.
                    default: 3600000
                  enable_star_channel:
                    type: boolean
                    description: |
                      Enable the star (*) channel.
                    default: 'true'
                  max_length:
                    type: integer
                    description: |
                      Maximum number of entries maintained in cache per channel.
                    default: 500
                  min_length:
                    type: integer
                    description: |
                      Minimum number of entries maintained in cache per channel.
                    default: 50
                  expiry_seconds:
                    type: integer
                    description: |
                      Time (seconds) to keep entries in cache beyond the minimum retained.
                    default: 60
              rev_cache:
                type: object
                description: |
                  Revision cache configuration
                properties:
                  size:
                    type: integer
                    description: |
                      Size of the revision cache, specified as the total number of document revisions to cache in memory for all recently accessed documents. When the revision cache is full, Sync Gateway removes less recent document revisions to make room for new document revisions. Adjust this property to tune memory consumption by Sync Gateway, for example on servers with less memory and in cases when Sync Gateway creates many new documents and/or updates many documents relative to the number of read operations.

                      ##### Disabling the revision cache

                      Disabling the revision cache is an [Enterprise Edition](https://www.couchbase.com/products/editions) feature.

                      To disable the revision entirely, set this property to 0. Setting this property to 0 on the Community Edition is ignored.

                      Disabling the revision cache would be useful when there are very large documents or if you expect a very low cache hit rate. Otherwise it could negatively impact the latency of replications. It is generally not recommended to disable the revision cache, unless advised by Couchbase [Enterprise Support](https://www.couchbase.com/support-policy).
                    default: 5000
                  shard_count:
                    type: integer
                    description: |
                      Tuning this property is an [Enterprise Edition](https://www.couchbase.com/products/editions) feature.
                      The Community Edition is configured with the default value, and will ignore any value in the configuration file.

                      Number of shards the rev cache should be split into. More shards allows for lower cache contention when accessing distinct revisions, at the cost of some memory overhead per-shard. This generally should not greatly exceed the number of CPU threads available to Sync Gateway.

                      It is generally not recommended to set this property, unless advised by Couchbase [Enterprise Support](https://www.couchbase.com/support-policy).
                    default: 8
          certpath:
            type: string
            description: |
              Relative or absolute path to the client's certificate to authenticate against Couchbase Server 5.5 or higher. The private key must be specified with the `databases.$db.keypath` property.
          enable_shared_bucket_access:
            type: boolean
            description: |
              Introduced in Sync Gateway 1.5, this property specifies whether to enable Mobile-Server Data Sync (a.k.a _mobile convergence_). You can learn more about this functionality [here](https://docs.couchbase.com/sync-gateway/current/shared-bucket-access.html)

              This property works in conjunction with the [import_docs](#databases-this_db-import_docs) property.

              `enable_shared_bucket_access` needs to be `true` on all nodes participating in such a configuration where as `import_docs` can only be set to `true` on a single node.

              On start-up, Sync Gateway will generate the mobile-specific metadata for all the pre-existing documents in the Couchbase Server bucket. From then on, documents can be inserted on the Server directly (with N1QL or SDKs) or through the Sync Gateway REST API.

              #### Tombstones

              When `enable_shared_bucket_access` is enabled, mobile tombstones are now also server tombstones. The document body is deleted, and only the mobile sync metadata required to replicate the tombstone is retained in the mobile extended attribute.

              The server's metadata purge interval becomes an important consideration for mobile deployments under convergence. When the server purges a tombstone (based on the metadata purge interval), that tombstone will no longer be replicated to mobile clients.

              Users should set the server's metadata purge interval based on their expected client replication frequency, to ensure that clients are notified of the tombstone prior to that tombstone being purged.

              NOTE: The default Metadata Purge Interval is set to 3 days which can potentially result in tombstones being purged before all clients have had a chance to get notified of it.

              Ways to tune the Metadata Purge Interval on Couchbase Server:

              - Bucket settings [on UI](https://developer.couchbase.com/documentation/server/current/settings/configure-compact-settings.html)
              - Bucket endpoint [on the REST API](https://developer.couchbase.com/documentation/server/current/rest-api/rest-bucket-create.html)

              #### Implementation notes for XATTRs:

              Mobile applications require additional metadata in order to manage security and replication. In previous versions of Sync Gateway, this information has always been stored in the document body. Sync Gateway 1.5 utilizes a new feature of Couchbase Server 5.0 called XATTRs (x-attributes) to store that metadata into an external document fragment.

              Extended attributes (xattrs) are JSON objects that can be associated with Couchbase documents. Each document can be associated with zero or more extended attributes. There are currently three types (user, system, virtual). Mobile Convergence uses a system extended attribute, which has the following characteristics central to convergence:

               - Shares lifetime with the document metadata - when a document is deleted, system xattrs are preserved with the tombstone.
               - Allocated 1MB of storage, independent of the 20MB available for the document

              Extended attributes are stored as part of the document, and are replicated with the document (both intra-cluster replication and XDCR).

              Extended attributes can be accessed via the SDKs using the sub-document API, via command-line tools, and via views.

              They are also accessible from N1QL in Couchbase Server 5.5 or above with the `().xattrs` property. For example, `SELECT meta().xattrs._sync from travel-sample where Meta().id = "user::demo";`.

              **WARNING:** The sync metadata is maintained internally by Sync Gateway and its structure can change at any time. It should not be used to drive business logic of applications. The direct use of the N1QL query is unsupported and must not be used in production environments.
              The `raw` endpoint ([/db/_raw/{docid}](../../../references/sync-gateway/admin-rest-api/index.html#!/document/get_db_raw_doc)) on Sync Gateway's Admin REST API returns both the document and it's associated mobile metadata.
            default: 'false'
          event_handlers:
            type: object
            description: Webhooks in Sync Gateway are designed to minimize performance impacts on Sync Gateway's regular processing. Sync Gateway manages the number of processes that are spawned for webhook event handling, so that slow response times from the HTTP POST operations don't consume available CPU resources on Sync Gateway nodes. When a `webhook` event handler is defined, after Sync Gateway has updated a document, Sync Gateway adds a `document_changed` event to an asynchronous event-processing queue (the event queue). New processes are then spawned to apply the `filter` function to the documents and to perform the HTTP POST operations. When an event is not added to the event queue, but is instead discarded, a warning message is written to the the Sync Gateway log. You can configure Sync Gateway to log information about event handling, by including either the log key `Event` or `Events+` in the `Log` property in your Sync Gateway configuration file. `Events+` is more verbose.
            properties:
              document_changed:
                description: The configuraton for the action to perform when a document change is detected.
                type: array
                items:
                  type: object
                  properties:
                    filter:
                      description: A JavaScript function used to determine which documents to post. The filter function accepts the document body as input and returns a boolean value. If the filter function returns true, then Sync Gateway posts the document. If the filter function returns false, then Sync Gateway does not post the document. If no filter function is defined, then Sync Gateway posts all changed documents. Filtering only determines which documents to post. It does not extract specific content from documents and post only that.
                      type: string
                      required: true
                    handler:
                      description: Type of the event handler. This must be `"webhook"` (only 1 possible value currently).
                      type: string
                    timeout:
                      description: Time in seconds to wait for a response to the POST operation. Using a timeout ensures that slow-running POST operations don't cause the webhook event queue to back up. Slow-running POST operations are discarded (if they time out), so that new events can be processed. When the timeout is reached, Sync Gateway stops listening for a response. A value of 0 (zero) means no timeout. The default value should work well in the majority of cases. You should not need to adjust it to tune performance.
                      type: integer
                      default: 60
                    url:
                      description: URL to which to post documents (for a webhook event handler).
                      type: string
                      required: true
              max_processes:
                type: integer
                description: Maximum number of events that can be processed concurrently, that is, no more than `max_processes` concurrent processes will be spawned for event handling. The default value should work well in the majority of cases. You should not need to adjust it to tune performance. However, if you wish to ensure that most webhook posts are sent, you can set it to sufficiently high value.
                default: 500
              wait_for_process:
                type: string
                description: Maximum wait time in milliseconds before canceling event processing for an event that is detected when the event queue is full. If you set the value to 0 (zero), then incoming events are discarded immediately if the event queue is full. If you wish to avoid any blocking of standard Sync Gateway processing this may be a desirable value to use. The default value should work well in the majority of cases. You should not need to adjust it to tune performance.
                default: 100
          feed_type:
            type: string
            description: (**Deprecated**) Feed type DCP or TAP.
            default: DCP
          import_filter:
            type: string
            description: |
              JavaScript filter function to determine if a document written to the Couchbase Server bucket should be made available to Couchbase Mobile clients (i.e imported). The filter function takes the document body as parameter and is expected to return a boolean to indicate whether the document should be imported.

              ```json
              {
                "databases": {
                  "db": {
                    "server": "http://localhost:8091",
                    "bucket": "default",
                    "password": "password",
                    "import_docs": true,
                    "enable_shared_bucket_access": true,
                    "import_filter": `
              		function(doc) {
              		  if (doc.type != "mobile") {
              		    return false
              		  }
              		  return true
              		}
              		`,
                  }
                }
              }
              ```
            default: function(doc) {return false;}
          keypath:
            type: string
            description: |
              Relative or absolute path to the client's private key to authenticate against Couchbase Server 5.5 or higher. The client certificate must be specified with the `databases.$db.certpath` property.
          local_doc_expiry_secs:
            type: integer
            description: |
              Starting in Sync Gateway 2.0, it is possible to set an expiry value for local documents managed on Sync Gateway. This property defaults to `7776000` (90 days) if not specified. Local documents are used by the Couchbase Lite replicator to track up to which sequence number a given client has synchronized and where it should resume the next time it connects to Sync Gateway. Clients that don't replicate within the expiry window will be forced to restart their replication from the beginning (sequence zero). This property is being introduced to prevent the accumulation of obsolete replication checkpoint documents in the Couchbase Server bucket.
            default: 7776000
          num_index_replicas:
            type: integer
            description: |
              Determines the number of index replicas used when creating the core Sync Gateway indexes. This property is only applicable if `databases.$db.use_views` is set to `false` (default value).
            default: 1
          oidc:
            type: object
            description: OIDC providers.
            properties:
              default_provider:
                type: string
                description: Provider to use for OIDC requests that don't specify a provider. If only one provider is specified in the providers map, it is used as the default provider. If multiple providers are defined and default_provider is not specified, requests to /db/_oidc must specify the provider parameter.
              providers:
                type: object
                properties:
                  this_provider:
                    type: object
                    properties:
                      issuer:
                        type: string
                        description: The OpenID Connect Provider issuer.
                      client_id:
                        type: string
                        description: The client ID defined in the provider for Sync Gateway.
                      validation_key:
                        type: string
                        description: Client secret associated with the client. Required for auth code flow.
                      signing_method:
                        type: string
                        description: Optional. Signing method used for validation key (provides additional security).
                      callback_url:
                        type: string
                        description: Optional. The callback URL to be invoked after the end-user obtains a client token. When not provided, Sync Gateway will generate it based on the incoming request.
                      register:
                        type: string
                        description: Optional. Whether Sync Gateway should automatically create users for successfully authenticated users that don't have an already existing user in Sync Gateway.
                      disable_session:
                        type: string
                        description: Optional. By default, Sync Gateway will create a new session for the user upon successful OIDC authentication, and set that session in the usual way on the _oidc_callback and _oidc_refresh responses. If disable_session is set to true, the session is not created (clients must use the ID token for subsequent authentications).
                      scope:
                        type: array
                        description: Optional. By default, Sync Gateway uses the scope "openid email" when calling the OP's authorize endpoint. If the scope property is defined in the config (as an array of string values), it will override this scope.
                        items:
                          type: string
                      include_access:
                        type: string
                        description: Optional. When true, the oidccallback response will include the access_token, expires_at and token_type properties returned by the OP.
                      user_prefix:
                        type: string
                        description: Optional. Specifies the prefix for Sync Gateway usernames for the provider. When not specified, defaults to issuer.
                      discovery_url:
                        type: string
                        description: Optional. Discovery URL used to obtain the OpenID Connect provider configuration. If not specified, the default discovery endpoint of [issuer]/.well-known/openid-configuration will be used.
                      disable_cfg_validation:
                        type: string
                        description: Optional. Disables strict validation of the OpenID Connect configuration.
          offline:
            type: string
            description: Whether the database if kept offline when Sync Gateway starts. Specifying the value true results in the database being kept offline. The default (if the property is omitted) is to bring the database online when Sync Gateway starts. For more information, see Taking databases offline and bringing them online.
            default: 'false'
          password:
            type: string
            description: The RBAC user's password for authenticating to Couchbase Server. There is no default.
          pool:
            type: string
            description: Couchbase pool name. The default is the string default.
          rev_cache_size:
            type: integer
            description: (Deprecated) Moved to [rev_cache.size](#databases-this_db-cache-rev_cache-size). Size of the revision cache, specified as the total number of document revisions to cache in memory for all recently accessed documents. When the revision cache is full, Sync Gateway removes less recent document revisions to make room for new document revisions. Adjust this property to tune memory consumption by Sync Gateway, for example on servers with less memory and in cases when Sync Gateway creates many new documents and/or updates many documents relative to the number of read operations.
            default: 5000
          revs_limit:
            type: integer
            description: |
              This property defines the maximum depth to which a document's revision tree can grow; its value governs the point at which to prune a document's revision tree.

              The default and minimum values of `revs_limit` are dependent on whether [allow_conflicts](config-properties.html#databases-this_db-allow_conflicts) is set True or False -- see the *Default and Minimum Values* table below.

              The process to remove obsolete revisions is called pruning and runs automatically every time a revision is added. Although fundamentally the same, the pruning algorithm works slightly differently between Sync Gateway and Couchbase Lite. On Sync Gateway, the pruning algorithm is applied to the shortest, non-tombstoned branch in the revision tree.

              If there are conflicting revisions, the document may end up with **disconnected branches** after the pruning process. In the animation below, the document has a conflicting branch (revisions `4'` - `1001'`). When the shortest branch (in this case the conflicting branch) reaches the 1003rd update, it gets is cut off. The revision tree is not in a corrupted state and the logic that chooses the winning revision still applies. But it may make it impossible to do certain merges (n-way merge) to resolve conflicts and will occupy disk space that could have been freed if the conflict was resolved early on.<br><br>

              ![](https://cl.ly/3C1G3t3R1v19/pruning-sg.gif)

              If the revision tree gets into this state then the only option to resolve the conflict is to pick a winning branch and tombstone all the non-winning conflicting branches.

              **NOTE:** Setting the `revs_limit` to a value below 100 when `allow_conflicts = true` may adversely affect the conflict resolution process, as there may be insufficient revision history to resolve a given conflict.

              #### Default and Minimum Values

              **For Releases 2.6+**

              allow_conflicts =| True | False
               :--- | :-------: | :-------:
              `revs_limit` default | 100 | 50 |
              `revs_limit` minimum | 20 | 1 |

              **For Releases 2.0 - 2.5**

               allow_conflicts = | <-- True --> |<-- False -->
               :--- | :-------: | :-------:
               `revs_limit` default  | 100 | 1000
               `revs_limit` minimum  | 50 | 1

              **For Release 1.x**
              - `revs_limit` default = 1000
              - `revs_limit` minimum = 20

              See also:
              - Sync Gateway purge endpoint [/{db}/_purge](admin-rest-api.html#/document/post__db___purge).
              - Sync Gateway [document TTLs](admin-rest-api.html#/document/put__db___doc_).

            default: see Default and Minimum Values table in Description
            minimum: see Default and Minimum Values table in Description
          roles:
            type: object
            description: Initial roles.
            properties:
              this_role:
                type: object
                description: The role name.
                properties:
                  admin_channels:
                    type: array
                    description: The list of channels this role is automatically granted access to when Sync Gateway starts.
                    items:
                      type: string
          send_www_authenticate_header:
            type: boolean
            description: Whether to send WWW-Authenticate header in 401 responses.
            default: 'true'
          server:
            type: string
            description: |
              The value of the *server* property specifies the Hostname(s) to the Couchbase Server node(s) in the cluster.

              Sync Gateway supports the ability to specify multiple hosts in the configuration.
              Sync Gateway supports both the `couchbase://` and `http://` schemes for specifying connection endpoints.

              Sync Gateway also supports *SSL* in the connection to Couchbase Server; use the `couchbases://` scheme for this.
              As with the Couchbase Server SDKs, the `https://` scheme is **not** supported.

              Examples of valid `server` values for *IPv4* include:
              - `couchbase://host1`
              - `couchbases://host1`
              - `couchbase://host1,host2`
              - `couchbase://host1:11210,host2,`
              - `couchbases://host1:11207,host2`
              - `http://host1:8091`
              - `http://host1,host2:8091`
              - `http://foo:bar@host1:8091`

              Examples of valid `server` values for *IPv6* include:
              - `http://[2001:db8::8811]:8091` *// single node IPv6 - http scheme with default server port*
              - `couchbases://[2001:db8::8811]` *// single node SSL IPv6 - default port (ommitted)*
              - `couchbase://[2001:db8::8811],[2001:db8::8822]:888` *// node1 default port, node2 port 888*

              As with the SDK, when using the `couchbase://` or `couchbases://` schemes, the port is not required, but if specified should be the external/internal bucket ports (defaults are 11210 or 11207 respectively). Attempting to use the admin ports (8091/18091) will result in a startup error.

              On startup, Sync Gateway will try each hostname that is provided until it is able to connect successfully.

              If the connection to Couchbase Server is lost during normal operations, Sync Gateway will automatically re-connect to another node in the cluster. During that re-connection period, the Sync Gateway will appear [offline](database-offline.html) and documents will not be replicated to mobile clients.

              The default value is an in-memory bucket called **walrus** that is only used during development and prototyping.
              Note that the **walrus** mode is being deprecated in Sync Gateway 2.5 and will be removed in a future release.
            default: 'walrus:'
          session_cookie_name:
            type: string
            description: |
              Starting in Sync Gateway 2.0, it is possible to customize the session cookie name that is used for this database. This configuration property is primarly used for web applications interacting with multiple Sync Gateway **databases**. Browsers typically have two methods of determining which cookie to use for a given request: the `URL` path or cookie name. With this property, you can use different cookie names for each database specified in the configuration file. Let's consider the following configuration file:

              ```json
              {
                 "interface":":4984",
                 "log":["*"],
                 "databases": {
                    "db1": {
                      "session_cookie_name": "CustomName1",
                      "server": "http://localhost:8091",
                      "bucket": "bucket-1",
                      "users": {
                          "user_1": {"password":"1234"}
                      },
                      "db2": {
                        "session_cookie_name": "CustomName2",
                        "server": "http://localhost:8091",
                        "bucket": "bucket-2",
                        "users": {
                            "adam_2": {"password":"5678"}
                        }
                      }
                    }
                 }
              }
              ```

              With this configuration, the `Set-Cookie` response header of the POST `:4984/{db}/_session` endpoint (Public REST API) would then have the form "CustomName1=3cad4b95524179bf144fe0d92b8f09877bb86bf5;path=/db1/".

              When using POST `:4985/{db}/_session` (Admin REST API) to create a session, the cookie value is returned in the response body instead of the `Set-Cookie` header. In this case, it could also be set by the client, for web applications it would be the following in JavaScript:

              ```javascript
              cookie1String = "CustomName1=3cad4b95524179bf144fe0d92b8f09877bb86bf5;path=/db1/";
              document.cookie = cookie1String;
              ```
            default: 'SyncGatewaySession'
          sync:
            type: string
            description: |
              The sync function is a JavaScript function whose source code is stored in the Sync Gateway's database configuration file. Every time a new document, revision or deletion is added to a database, the sync function is called and given a chance to examine the document (see the [Sync Function API guide](sync-function.html)).

              If a document is in conflict there will be multiple current revisions. The default, the "winning" one is the one whose channel assignments and access grants take effect.

              If you don't supply a sync function, Sync Gateway uses the following default sync function:

              ```javascript
              function (doc, oldDoc) {
                 channel(doc.channels);
              }
              ```

              In plain English: by default, a document will be assigned to the channels listed in its channels property (whose value must be a string or an array of strings.) More subtly, since there is no validation, any user can change any document. For this reason, the default sync function is really only useful for experimentation and development.

              The `channels` property is an array of strings that contains the names of the channels to which the document belongs.
              If you do not include a `channels` property in a document, the document does not appear in any channels.
              Adding a `channels` property to each document is the easiest way to map documents to channels but if you need more advanced behavior such as read and write access, you'll probably need to write your own Sync Function.
            default: function(doc, oldDoc) {channel(doc.channels);}
          username:
            type: string
            description: The RBAC user's username for authenticating to Couchbase Server. There is no default.
          users:
            type: object
            description: Initial user accounts.
            properties:
              this_user:
                type: object
                description: The user's name.
                properties:
                  password:
                    type: string
                    description: The user's password.
                  admin_channels:
                    type: array
                    description: The list of channels this user is automatically granted access to when Sync Gateway starts. If `"*"` is specified then the user is granted access to the [star channel](sync-gateway-channels.html#special-channels) which contains all documents.
                    items:
                      type: string
                  admin_roles:
                    type: array
                    description: The list of roles this user is automatically assigned to when Sync Gateway starts.
                    items:
                      type: string
                  disabled:
                    type: boolean
                    description: Whether this user account is disabled.
          use_views:
            type: boolean
            description: |
              If set to `true`, Sync Gateway will use views instead of GSI for system functions like authentication and replication.
            default: 'false'
          view_query_timeout_secs:
            type: integer
            description: |
              The view query timeout in seconds. This property allows you to specify the time Sync Gateway should wait for a view query response from Couchbase Server before it times out. The timeout is used for both view and N1QL queries issued by Sync Gateway.
            default: 75
  facebook:
    description: Configuration for Facebook Login authentication.
    type: object
    properties:
      register:
        description: Whether the `POST /{db}/_facebook` endpoint should register a user if one doesn't already exist. The email returned by Facebook is used to determine if that user already exists in Sync Gateway.
        type: boolean
        default: 'false'
  google:
    description: Configuration for Google Login authentication.
    type: object
    properties:
      register:
        description: Whether the `POST /{db}/_google` endpoint should register a user if one doesn't already exist. The username and email returned by Google are used to determine if that user already exists in Sync Gateway.
        type: boolean
        default: 'false'
      app_client_id:
        description: The Google App Client ID.
        type: string
  interface:
    description: Public REST API port.
    type: string
    default: ':4984'
  log:
    description: |
      **NOTE:** This property is being deprecated in Sync Gateway 2.1 and replaced by the new [logging](#logging) property.

      Comma-separated list of log keys to enable for diagnostic logging. Use ["*"] to enable logging for all log keys.

      - Access: Anytime an access() call is made in the sync function.
      - Attach: Attachment processing.
      - Auth: Authentication.
      - Bucket: Sync Gateway interactions with the bucket (verbose logging).
      - Cache: Interactions with Sync Gateway's in-memory channel cache.
      - Changes: Processing of _changes requests.
      - CRUD: Updates made by Sync Gateway to documents.
      - DCP: DCP-feed processing (verbose logging).
      - Events: Event processing (webhooks).
      - Feed: Server-feed processing.
      - HTTP: All requests made to the Sync Gateway REST APIs (Sync and Admin). Note that the log keyword HTTP is always enabled, which means that HTTP requests and error responses are always logged (in a non-verbose manner). HTTP+ provides more verbose HTTP logging.
      - Replicate: Log messages related to replications between Sync Gateways (using sg-replicate). This tag cannot be used for replications initiated by Couchbase Lite.
      - Import+: This logging key was introduced in Sync Gateway 1.5 to help troubleshoot the import process of a document (this is the Sync Gateway process to make a document that was added through N1QL or the Server SDKs mobile-aware). This log key can be useful to troubleshoot why a given document was not successfully imported.
      - Sync: Activity which relates to synchronization between Couchbase Lite and Sync Gateway (`Sync+` and `Sync++` can be used for additional logging output).
    type: string
    default: '["HTTP"]'
  logFilePath:
    description: |
      **NOTE:** This property is being deprecated in Sync Gateway 2.1 and replaced by the new [logging](#logging-log_file_path) property.

      Absolute or relative path on the filesystem to the log file. A relative path is from the directory that contains the Sync Gateway executable file.
    type: string
    default: 'stderr'
  logging:
    description: The logging object.
    type: object
    properties:
      log_file_path:
        description: Absolute or relative path on the filesystem to the log file. A relative path is from the directory that contains the Sync Gateway executable file.
        type: string
      redaction_level:
        description: |
          Optionally, log files can be redacted. This means that user-data, considered to be private, is removed. Such data includes:
            - Key/value pairs in JSON documents
            - Usernames
            - Query-fields that reference key/value pairs and/or usernames
            - Names and email addresses retrieved during product registration
            - Extended attributes

          This redaction of user-data is referred to as partial redaction. To enable it, the value must be `"partial"` in the configuration file:

          ```json
          {
            "logging": {
              "redaction_level": "partial"
            }
          }
          ```

        type: string
        default: 'none'
      console:
        description: Settings for the console output logging.
        type: object
        properties:
          log_level:
            description: The level of logging. Log levels accumulate as you read down the table (i.e log entries at WARN will also be included in the INFO and DEBUG logs).
            type: string
            default: 'info'
          log_keys:
            description: |
              List of log keys to enable for diagnostic logging. Example:

              ```json
              {
                "logging": {
                  "console": {
                    "log_keys": ["HTTP", "CRUD", "Import"]
                  }
                }
              }
              ```

              Available log key values include:

              - `Admin`: Admin processes in Sync Gateway.
              - `Access`: Anytime an `access()` call is made in the sync function.
              - `Attach`: Attachment processing.
              - `Auth`: Authentication.
              - `Bucket`: Sync Gateway interactions with the bucket (`trace` level only).
              - `Cache`: Interactions with Sync Gateway's in-memory channel cache.
              - `Changes`: Processing of `/{db}/_changes` requests.
              - `CRUD`: Updates made by Sync Gateway to documents.
              - `DCP`: DCP-feed processing.
              - `Events`: Event processing (webhooks).
              - `gocb`
              - `HTTP`: All requests made to the Sync Gateway REST APIs.
              - `HTTP+`: Additional information about HTTP requests (response times, status codes).
              - `Import`: Introduced in Sync Gateway 1.5 to help troubleshoot the import process of a document (this is the Sync Gateway process to make a document that was added through N1QL or the Server SDKs mobile-aware). This log key can be useful to troubleshoot why a given document was not successfully imported.
              - `Migrate`
              - `Query`
              - `Replicate`: Log messages related to replications between Sync Gateways (using sg-replicate). This tag cannot be used for replications initiated by Couchbase Lite.
              - `Shadow`
              - `Sync`: Activity which relates to synchronization between Couchbase Lite and Sync Gateway
              - `SyncMsg`: Can be used for additional Sync logging output
              - `WS`: Websocket replication log messages
              - `WSFrame`: Can be used for additional WS logging output
              - *: Wildcard log key. Enables all log keys if set.

            type: array
            items:
              type: string
            default: '["HTTP"]'
          color_enabled:
            description: Use ANSI color codes in the console output (Linux/MacOS only).
            type: boolean
            default: 'false'
      default:
        type: string
        description: |
          Logging configuration. This property is being **deprecated** in Sync Gateway 2.1 and replaced with 4 different log levels.

          See the [`logging.$level`](#logging-$level) property for more detail.
        default: ''
        deprecated: true
      $level:
        description: |
          The level of logging as a key. Log levels accumulate as you read down the table (i.e log entries at WARN will also be included in the INFO and DEBUG logs).

          |Level|Description|Minimum max_age|Log File Name|
          |:---|:---|:---|:---|
          |ERROR|Critical error messages.|180 days|sg_error.log|
          |WARN|Something is wrong but SG can still service requests|90 days|sg_warn.log|
          |INFO|Important diagnostics for support and customers|3 days|sg_info.log|
          |DEBUG|Lower level development analysis|1 day|sg_debug.log|

          Each log level takes a dictionary as value and various properties can set for each log level. For example:

          ```javascript
          "logging": {
              "log_file_path": "/home/sync_gateway/logs", // Where to put log files
              "console": {
                  "log_level": "info",  // What level to output to console - [error|warn|info|debug|none]
                  "log_keys": ["HTTP"], // What log keys to output to console (comma separated)
                  "color_enabled": true
              },
              "error": {
                  "enabled": true,
                  "rotation": {
                      "max_size": 100,    // Threshold in megabytes to rotate logs
                      "max_age": 360,     // Maximum days to retain log files (Min: 180)
                      "localtime": false // Use local computer's time on backup timestamps (false=UTC)
                  }
              },
              "warn": {
                  "enabled": true,
                  "rotation": {
                      "max_size": 100,
                      "max_age": 180,     // (Minimum: 90)
                      "localtime": false
                  }
              },
              "info": {
                  "enabled": true,
                  "rotation": {
                      "max_size": 100,
                      "max_age": 6,     // (Minimum: 3)
                      "localtime": false
                  }
              },
              "debug": {
                  "enabled": false,
                  "rotation": {
                      "max_size": 100,
                      "max_age": 2,     // (Minimum: 1)
                      "localtime": false
                  }
              }
          }

          ```
        type: object
        properties:
          enabled:
            description: |
              Whether to enable this log level.
              The *error*, *warn* and *info* log levels are enabled by default.
              The *debug* log level is disabled by default.

              Note, however, that you are advised to keep this log level enabled to troubleshoot issues. Enabling this log level is a requirement to receive [Enterprise Support](https://www.couchbase.com/support-policy).
            type: boolean
          rotation:
            description: The log file may be rotated by defining a "rotation" sub document. See details in the table below.
            type: object
            properties:
              max_size:
                type: integer
                description: The maximum size in MB of the log file before it gets rotated.
                default: 100
              max_age:
                type: integer
                description: The maximum number of days to retain old log files. This can't be set below the minimum allowed value for the given level.
              localtime:
                type: boolean
                description: If true, it uses the computer's local time to format the backup timestamp. False uses UTC.
                default: false
              rotated_logs_size_limit:
                description: |
                  Controls how much disk space the rotated (and compressed) log files for this level can take up.

                  The value is expressed in megabytes.
                  The minimum value is `10` and there is no maximum value.
                type: integer
                default: 1024
  maxFileDescriptors:
    description: Maximum number of open file descriptors.
    type: integer
    default: 5000
  maxHeartbeat:
    description: Maximum heartbeat value for _changes feed requests (in seconds).
    type: integer
  maxIncomingConnections:
    description: Maximum number of incoming HTTP connections to accept.
    type: integer
    default: 0
  pretty:
    description: (**Deprecated**) Whether to pretty-print JSON responses.
    type: boolean
    default: 'false'
  profileInterface:
    description: (**Deprecated**) TCP network address (IP address and the port) that the Go profile API listens on. You can obtain go profiling information from the interface. You can omit the IP address.
    type: string
  replications:
    type: array
    items:
      type: object
      properties:
        replication_id:
          type: string
          description: ID to assign this replication with. If no replication_id is given for a new replication it will be assigned a random UUID.
        source:
          type: string
          description: Identifies the database to copy revisions from. Can be a string containing a local database name or a remote database URL, or an object whose url property contains the database name or URL. Also an object can contain headers property that contains custom header values such as a cookie.
        target:
          type: string
          description: Identifies the database to copy revisions to. Same format and interpretation as source.
        continuous:
          type: boolean
          description: Specifies whether the replication should be in continuous mode.
        changes_feed_limit:
          type: integer
          description: The maximum number of change entries to pull in each loop of a continous changes feed.
          default: 50
        filter:
          type: string
          description: Indicates that the documents should be filtered using the specified filter function name. A common value used when replicating from Sync Gateway is sync_gateway/bychannel to limit the pull replication to a set of channels.
        query_params:
          type: array
          description: A set of key/value pairs to use in the querystring of the replication. For example, the channels field can be used to pull from a set of channels (in this particular case, the filter key must be set for the channels field to work as expected).
          items:
            type: string
  replicator_compression:
    description: |
      This sets the 'deflate' compression level to use when compressing messages sent via the WebSocket protocol, where 0 means no compression, 1 means fastest (least) compression, and 9 means slowest (most) compression.
    type: integer
    default: 6
  serverReadTimeout:
    description: Maximum duration in seconds before timing out the read of an HTTP(S) request. This property only effects the HTTP connections on the Sync Gateway public and admin ports. Sync Gateway is written in the Go programming language, therefor the value set in the configuration file is passed to Go's server instance [https://golang.org/pkg/net/http/#Server](https://golang.org/pkg/net/http/#Server).
    type: integer
  serverWriteTimeout:
    description: Maximum duration in seconds before timing out the write of an HTTP(S) response. This property only effects the HTTP connections on the Sync Gateway public and admin ports. Sync Gateway is written in the Go programming language, therefor the value set in the configuration file is passed to Go's server instance [https://golang.org/pkg/net/http/#Server](https://golang.org/pkg/net/http/#Server).
    type: integer
  slowQueryWarningThreshold:
    description: Log warnings if N1QL or View queries made by Sync Gateway take this many milliseconds or longer.
    type: integer
    default: 500
  SSLCert:
    description: Absolute or relative path on the filesystem to the TLS certificate file, if TLS is used to secure Sync Gateway connections, or "nil" for plaintext. A relative path is from the directory that contains the Sync Gateway executable file.
    type: string
  SSLKey:
    description: Absolute or relative path on the filesystem to the TLS private key file, if TLS is used to secure Sync Gateway connections, or "nil" for plaintext. A relative path is from the directory that contains the Sync Gateway executable file.
    type: string
  tls_minimum_version:
    description: |
      Enforce a minimum TLS version to be used in replications with Couchbase Lite.

      Possible values are:

      - "tlsv1"
      - "tlsv1.1"
      - "tlsv1.2"
    type: string
    default: 'tlsv1'
