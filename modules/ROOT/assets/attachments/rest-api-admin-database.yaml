swagger: '2.0'
info:
  title: Sync Gateway
  description: |+
    Sync Gateway's Database Configuration Admin REST API enables authorized users to create, configure and manage Sync Gateway databases.

    Content aligned to spec
# the domain of the service
host: localhost:4985
# array of all schemes that your API supports
schemes:
- http
- https
# will be prefixed to all paths
consumes:
- application/json
produces:
- application/json


securityDefinitions:
  admin_auth:
    type: "oauth2"
    authorizationUrl: "tbd"
    flow: "implicit"
    scopes:
      write:databases: "modify databases in your account"
      read:databases: "read database details"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"

paths:

#  SERVER METADATA
  /:
    get:
      tags:
      - server
      summary: Server
      description: |
        Returns meta-information about the server.
      responses:
        200:
          description: Meta-information about the server.
          schema:
            $ref: '#/definitions/Server'
  /_config:
    put:
      tags:
      - bootstrap
      summary: Update bootstrap logging options with needing a restart
      description: |+
        Update bootstrap logging options with needing a restart

      parameters:
        - $ref: '#/parameters/Logging'
      responses:
        200:
          description: Returned updated Bootstrap logging settings
          schema:
            $ref: '#/definitions/Bootstrap'


# ACTIVE TASKS
  # /_active_tasks:
  #   get:
  #     tags:
  #     - server
  #     - my_inter-sync-gateway_replication
  #     summary: Return status of Inter-Sync Gateway Replication (v1) replications
  #     description: |+
  #       <h5>**Deprecated @ 2.8** replaced by Inter-Sync Gateway Replication (v2)'s *[_replicationStatus](#/server/get__replicationStatus)* endpoint. This **_active_tasks** endpoint is retained **solely** for backward compatibility.<h5>

  #       Use this end point to return the status of active Inter-Sync Gateway Replication (v1) replications. Only replications configured on the local node are returned.

  #       The response is as defined in [_replicationStatus](#/replications/get__db___replicationStatus) except that it also includes:
  #         - **end_last_seq**, which returns the maximum of (last_seq_pull, last_seq_push)
  #         - **start_last_seq**, which is not populated (as was the case prior to Sync Gateway 2.8)

  #       The Inter-Sync Gateway Replication (v2) equivalent is `_replicationStatus?localOnly=true&activeOnly=true` -- see [_replicationStatus](#/replications/get__db___replicationStatus).
  #     responses:
  #       200:
  #         description: Information about active replications.
  #         schema:
  #           type: array
  #           items:
  #             type: object
  #             $ref: '#/definitions/ActiveTaskResponseBody'

#  DATABASE CONFIG AND MANAGEMENT

  # /{db}/_bulk_docs:
  #   parameters:
  #     - $ref: '#/parameters/db'
  #   post:
  #     tags:
  #     - database
  #     summary: Bulk docs
  #     description: |
  #       This request enables you to add, update, or delete multiple documents to a database in a single request. To add new documents, you can either specify the ID (`_id`) or let the software create an ID. To update existing documents, you must provide the document ID, revision identifier (`_rev`), and new document values. To delete existing documents you must provide the document ID, revision identifier, and the deletion flag (`_deleted`).

  #       The JSON returned by the `_bulk_docs` operation consists of an array of JSON structures, one for each document in the original submission. The returned JSON structure should be examined to ensure that all of the documents submitted in the original request were successfully added to the database.
  #     parameters:
  #       - $ref: '#/parameters/bulkdocs'
  #     responses:
  #       201:
  #         description: Documents have been created or updated. The response object is an array with the status for each document submitted in the original request.
  #         schema:
  #           type: array
  #           items:
  #             $ref: '#/responses/200-bulk-docs'
  #       409:
  #         description: The operation failed with a forbidden error. Probably because the document already exists in the database but a revision number wasn't specified.
  #         schema:
  #           $ref: '#/definitions/Forbidden'

  /{db}/:
    put:
      operationId: "create_db"
      tags:
      - database
      summary: Create a Sync Gateway database
      description: |+
        Use this endpoint to add new Sync Gateway databases.

        Provide the database name in the URL path.
        Provide the required database configuration settings as a JSON object in the request body.

        By default the created database is brought online immediately, **unless** you include `"offline": true` in the configuration.

        `See: {rest-api-admin--xref}` for further information on this.
      parameters:
        - $ref: '#/parameters/db'
        - $ref: '#/parameters/db_config_body'
      responses:

        201:
          $ref: '#/responses/OK-create'

        401:
          $ref: '#/responses/Unauthorized'



  /{db}/_config:
    put:
      operationId: "upsert_db_config"
      tags:
      - database
      summary: Update Sync Gateway database configuration settings
      description: |+
        Use this endpoint to update the configuration of an existing database.

        Provide the database name in the URL path.
        Provide the required database configuration settings as a JSON object in the request body.
        You only need to provide those settings you wish to change.

        `See: {rest-api-admin--xref}` for further information on this.
      parameters:
      - $ref: '#/parameters/db'
      - $ref: '#/parameters/db_config_body'
      responses:

        200:
          $ref: '#/responses/OK'

        401:
          $ref: '#/responses/Unauthorized'

  /{db}/_config/import_filter:
    put:
      operationId: "upsert_import_filter"
      tags:
      - database
      summary: Upsert an import_filter function
      description: |+
        Use this convenience endpoint to create and-or update the `import_filter` Javascript function for this database.
      parameters:
        - $ref: '#/parameters/db'
        - $ref: '#/parameters/import_filter_body'

      responses:
        200:
          description: OK
          schema:
            $ref: '#/responses/200-import-filter'

  /{db}/_config/sync:
    put:
      operationId: "upsert_sync_function"
      tags:
      - access-control
      summary: Upsert a Sync Function
      description: |+
        Use this convenience endpoint to create and-or update the `Sync` Function for this database
      parameters:
        - $ref: '#/parameters/db'
        - $ref: '#/parameters/sync_function_body'
        # - in: body
        #   name: sync
        #   description: |+
        #     Access Control Sync Function
        #   required: true
        #   schema:
        #     $ref: "#/definitions/"
      responses:
        200:
          description: OK
          schema:
            $ref: '#/responses/200-sync'

  /{db}/_role/{name}:
    put:
      operationId: "upsert_role"
      tags:
      - security
      summary: Role
      description: |+
        Use this convenience endpoint to upsert a Sync Gateway role for the specified database.
      parameters:
      - $ref: '#/parameters/db'
      - $ref: '#/parameters/role_name'
      - $ref: '#/parameters/role_body_upsert'

      responses:
        200:
          description: 200 OK – The role was updated successfully
        201:
          description: 201 Created – The role was created successfully

  /{db}/_user/{name}:
    put:
      operationId: "upsert_user"
      tags:
      - security
      summary: Creates or updates a user
      description: |+
        Use the `\_user` endpoint to create or update a Sync Gateway user for the specified database.
      parameters:
      - $ref: '#/parameters/db'
      - $ref: '#/parameters/name'
      - $ref: '#/parameters/user_body_upsert'
      responses:
        200:
          description: 200 OK – The user record was updated successfully
        201:
          description: 201 Created – The user record was created successfully

  /{db}/_replication/{replication_id}:
    put:
      operationId: "upsert_replication"
      tags:
      - replication
      description: |+
        Use the `\_replication` endpoint to upsert inter Sync Gateway configuration definitions

        Using a PUT request you can update or insert replication details for _ad hoc or _persistent_ replication operations.

      parameters:
      - $ref: '#/parameters/db'
      - $ref: '#/parameters/replication_id_upsert'
      - $ref: '#/parameters/replication_body_upsert'

definitions:
  bootstrap-api:
    bootstrap:
      type: object
      description: |+
        Sync Gateway's start-up configuration file
      properties:
        group_id:
          type: string
          default: "default"
          description: |+
            The ID of the configuration group to which this node belongs.

        # buckets:
        #   type: array
        #   description: |+
        #     A list of buckets holding config data
        #   items:
        #     bucket_name:
        #       type: string
        #       description: |+
        #         Name of a bucket storing configuration data

        config_update_frequency:
          type: string
          default: "10s"
          description: |+
            Sets the interval between checks for new or updated configurations made by other nodes in Couchbase Server

            It is provided as string, which uses Go's duration format (e.g: 1s = 1 second, 5m = 5 minutes , 1h32m15s = 1 hour, 32 mins, 15 seconds)
            see: https://pkg.go.dev/time#ParseDuration

        server:
          type: string
          default: none
          description: |+
            Sets the endpoint for the Couchbase Server holding (database) configuration details.

        username:
          type: string
          default: none
          description: |+
            The username to be used when authenticating to the server.
        password:
          type: string
          default: none
          description: |+
            The password to be used when authenticating to the server.

        ca_cert_path:
          type: string
          summary: Root CA cert path for TLS connection
          description: |+
            Absolute or relative path on the filesystem to the root CA certificate to verify the certificate chain and hostname of the Couchbase Server cluster.

            Works in conjunction with `server_tls_skip_verify` to control whether system root pool is used or not.
            Set this empty and `server_tls_skip_verify` true to avoid using system root pool

        server_tls_skip_verify:
          type: boolean
          description:
            Defaults to `false`, which requires a valid CA Cert Path.

            Works in conjunction with `ca_cert_path` to control whether system root pool is used or not.

            Set this true and `ca_cert_path` empty to allow, for example, self-signed or un-trusted certificates.
            This will be the default of-of-the-box setting.

        x509_cert_path:
          type: string
          summary: Cert path (public key) for X.509 bucket auth
          description: |+
            Use x509_cert_path to define the absolute or relative path on the filesystem to the x509 certificate.

            Relative paths are relative to the directory containing the Sync Gateway executable.

        x509_key_path:
          type: string
          summary: Key path (private key) for X.509 bucket auth
          description: |+
            Absolute or relative path on the filesystem to the X509 key.

            Relative paths are relative to the directory containing the Sync Gateway executable.

        use_tls_server:
          type: boolean
          default: true
          description: |+
            Default to `true`, which forces the connection to Couchbase Server to use TLS.

            Use `use_tls_server` to enforce use of a secure scheme (for example, `couchbases://`) to connect to Couchbase Server.

            Set this `false` to use a non-secure scheme (for example with `couchbase://`).

            If the scheme used does not match that indicated by the `use_tls_server` value (for example, `couchbases://` with `use_tls_server` = `false`) then Sync Gateway will error and refuse to start.

            Use in conjunction with
    api:
      type: object
      description: |+
        Holding object for API related settings.

      properties:
        admin_interface:
          type: string
          default: '127.0.0.1:4985'
          description: |+
            Port or TCP network address (IP address and the port) that the Admin REST API listens on.

            The loopback address prefix before the port (`127.0.0.1`) means the interface will not be reachable from other hosts. To make it reachable, change it to ":4985".

            Change requires restart of Admin API
        admin_interface_authentication:
          type: boolean
          default: true
          description: |+
            Use the `admin_interface_authentication` property to disable authentication for the metrics API.
            This option should be used with discretion and only in test environments.

            By default the Admin API requires Couchbase Server RBAC authentication.
            The user must provide credentials to an existing user with an appropriate Sync Gateway role.

        metrics_interface:
          type: string
          default: '127.0.0.1:4986'
          description: |+
            This defines the Port or TCP network address (IP address and the port) that the Metrics REST API will listen on.

            Using the loopback address prefix before the port (`127.0.0.1`) means the interface will not be reachable from other hosts.

            For example
            ```"metricsInterface": "127.0.0.1:4986"```
        metrics_interface_authentication:
          type: boolean
          default: true
          description: |+
            Use the `metrics_interface_authentication` property to disable authentication for the metrics API.
            This option should be used with discretion and only in test environments.

            By default the Metrics API requires Couchbase Server RBAC authentication.
            The user must provide credentials to an existing user with an appropriate Sync Gateway role.

        enable_advanced_auth_dp:
          type: boolean
          description: |+
            Whether to enable the DP permissions check feature of admin auth

        profile_interface:
          type: string
          description: |+
            TCP network address (IP address and the port) that the Go profile API listens on.
            You can obtain Go profiling information from the interface.
            You can omit the IP address.

        public_interface:
          type: string
          default: ':4984'
          description: |+
            Public REST API port

            Change requires restart of Public API

        compress_responses:
          description: |+
            Whether to compress HTTP responses. Set to false to disable compression of HTTP responses.

          type: boolean
          default: 'true'
        cors:
          type: object
          description: |+
            Configuration object for allowing cross-origin resource sharing (CORS).
            This is useful to interact directly with Sync Gateway from HTML 5 applications via XHR.

            Change requires HTTP server restart
          properties:
            headers:
              type: array
              description: |+
                List of HTTP headers that can be used by domains specified in the `origin` and `login_origin` properties.<br>
                A common value is `["Content-Type"]` as clients use the `Content-Type: application/json` header when sending data as JSON in the body of POST/PUT requests.

                Change requires HTTP server restart
              items:
                type: string
            login_origin:
              type: array
              description: |+
                List of allowed login origins.

                Change requires HTTP server restart

              items:
                type: string
            max_age:
              type: integer
              description: |+
                Value for the Access-Control-Max-Age header.
                This is the period of time, in seconds, that the response to a CORS preflight request is cached before sending another preflight request.

                Change requires HTTP server restart

            origin:
              type: array
              description: |+
                List of allowed origins; use a wildcard character (*) to allow access from everywhere.

                Note that the wildcard (*) cannot be used if you plan to authenticate users as well (by using the `withCredentials` flag on the client side).
                In this case, the explicit domain(s) must be specified in the `origin` and `login_origin` properties of the configuration file.

                Change requires HTTP server restart
              items:
                origin:
                  type: string
                  description: An allowed origin array element
        hide_product_version:
          type: boolean
          default: false
          description: |+
            Determines whether product versions are removed from Server headers and REST API responses.
            This setting does not apply to the Admin REST API.

            This customization of the Sync Gateway response avoids revealing the version of the Sync Gateway to HTTP requests to the root path.
        https:
          type: object
          description: Group in which to specify any API HTTPS configuration properties
          properties:
            # allow_insecure_tls_connections:
            #   type: boolean
            #   default: false
            #   description: |+
            #     Secure TLS connections are used by default for all REST API dialogs.

            #     If necessary, for testing purposes, you can disable this by setting this property to ```true```.
            #     *Note* tha insecure connections should NOT be used in production deployments.
            tls_minimum_version:
              type: string
              default: 'tlsv1.2'
              summary: The minimum allowable TLS version for the REST APIs
              description: |+
                Enforce a minimum TLS version to be used in replications with Couchbase Lite.

                Possible values are:

                - "tlsv1"
                - "tlsv1.1"
                - "tlsv1.2"
                - "tlsv1.3"

                Change requires HTTP server restart

            tls_cert_path:
              type: string
              summary: The TLS certificate file to use for the REST APIs
              description: |+
                Absolute or relative path on the filesystem to the TLS certificate file, if TLS is used to secure Sync Gateway connections

                To use plaintext, omit both this property and the `tls_key_path` property.

                A relative path is from the directory that contains the Sync Gateway executable file.

                Change requires HTTP server restart
            tls_key_path:
              type: string
              summary: The TLS key file to use for the REST APIs
              description: |+
                Absolute or relative path on the filesystem to the TLS private key files.

                To use plaintext, omit both this property and the `tls_cert_path` property.

                A relative path is from the directory that contains the Sync Gateway executable file.

                Change requires HTTP server restart
        idle_timeout:
          type: integer
          default: 90
          description: |+
            Maximum duration (in seconds) to wait for the next request when keep-alives are enabled

            Change requires HTTP server restart
        max_connections:
          type: integer
          default: 0
          description: |+
            Maximum number of incoming HTTP connections to accept.

            Change requires HTTP server restart
        pretty:
          type: boolean
          default: false
          description: |+
            (**Deprecated**) Whether to pretty-print JSON responses.

        read_header_timeout:
          type: integer
          default: 5
          description: |+
            Maximum duration (in seconds) allowed to read request headers

            Change requires HTTP server restart
        server_read_timeout:
          type: integer
          description: |+
            Maximum duration in seconds before timing out the read of an HTTP(S) request. This property only effects the HTTP connections on the Sync Gateway public and admin ports. Sync Gateway is written in the Go programming language, therefor the value set in the configuration file is passed to Go's server instance [https://golang.org/pkg/net/http/#Server](https://golang.org/pkg/net/http/#Server).

            Change requires HTTP server restart
        server_write_timeout:
          type: integer
          description: |+
            Maximum duration in seconds before timing out the write of an HTTP(S) response. This property only effects the HTTP connections on the Sync Gateway public and admin ports. Sync Gateway is written in the Go programming language, therefor the value set in the configuration file is passed to Go's server instance [https://golang.org/pkg/net/http/#Server](https://golang.org/pkg/net/http/#Server).

            Change requires HTTP server restart
        # tls:
        #   type: object
        #   description: |+
        #     Holding object for TLS settings
        #   properties:
            # tls_minimum_version:
            #   type: string
            #   default: 'tlsv1.3'
            #   summary: The minimum allowable TLS version for the REST APIs
            #   description: |+
            #     Enforce a minimum TLS version to be used in replications with Couchbase Lite.

            #     Possible values are:

            #     - "tlsv1"
            #     - "tlsv1.1"
            #     - "tlsv1.2"
            #     - "tlsv1.3"

            # tls_cert_path:
            #   type: string
            #   summary: The TLS certificate file to use for the REST APIs
            #   description: |+
            #     Absolute or relative path on the filesystem to the TLS certificate file, if TLS is used to secure Sync Gateway connections, or "nil" for plaintext. A relative path is from the directory that contains the Sync Gateway executable file.
            # tls_key_path:
            #   type: string
            #   summary: The TLS key file to use for the REST APIs
            #   description: |+
            #     Absolute or relative path on the filesystem to the TLS private key file, if TLS is used to secure Sync Gateway connections, or "nil" for plaintext. A relative path is from the directory that contains the Sync Gateway executable file.
    logging:
      type: object
      description: |+
        Holding object for all logging-related settings

      tags:
        - dynamic
      properties:
        log_file_path:
          type: string
          description: |+
            Absolute or relative path on the filesystem to the log file. A relative path is from the directory that contains the Sync Gateway executable file.

            Changes require full logging re-initialization
        redaction_level:
          type: string
          default: none
          description: |+
            Optionally, log files can be redacted. This means that user-data, considered to be private, is removed. Such data includes:
              - Key/value pairs in JSON documents
              - Usernames
              - Query-fields that reference key/value pairs and/or usernames
              - Names and email addresses retrieved during product registration
              - Extended attributes

            This redaction of user-data is referred to as partial redaction. To enable it, the value must be `"partial"` in the configuration file:

            ```json
            {
              "logging": {
                "redaction_level": "partial"
              }
            }
            ```
        console:
          type: object
          description: Settings for the console output logging.
          properties:
            enabled:
              type: boolean
              description: Indicates whether console logging is enabled
            rotation:
              type: object
              description: |+
                The log file may be rotated by defining a "rotation" sub document. See details in the table below.
              properties:
                max_size:
                  type: integer
                  description: The maximum size in MB of the log file before it gets rotated.
                  default: 100
                max_age:
                  type: integer
                  description: The maximum number of days to retain old log files. This can't be set below the minimum allowed value for the given level.
                localtime:
                  type: boolean
                  description: If true, it uses the computer's local time to format the backup timestamp. False uses UTC.
                  default: 'false'
                rotated_logs_size_limit:
                  type: integer
                  default: 1024
                  description: |+
                    Controls how much disk space the rotated (and compressed) log files for this level can take up.

                    The value is expressed in megabytes.
                    The minimum value is `10` and there is no maximum value.
            collation_buffer_size:
              type: integer
              description: |+
                Size of the collation buffer

            log_level:
              type: string
              default: 'info'
              description: |+
                The level of logging. Log levels accumulate as you read down the table (i.e log entries at WARN will also be included in the INFO and DEBUG logs).
            log_keys:
              description: |+
                List of log keys to enable for diagnostic logging. Example:

                ```json
                {
                  "logging": {
                    "console": {
                      "log_keys": ["HTTP", "CRUD", "Import"]
                    }
                  }
                }
                ```

                Available log key values include:

                - *: Wildcard log key. Enables all log keys
                - `none`:Disables all log keys
                - `Admin`: Admin processes in Sync Gateway.
                - `Access`: Anytime an `access()` call is made in the sync function.
                - `Auth`: Authentication.
                - `Bucket`: Sync Gateway interactions with the bucket (`trace` level only).
                - `Cache`: Interactions with Sync Gateway's in-memory channel cache.
                - `Changes`: Processing of `/{db}/_changes` requests.
                - `CRUD`: Updates made by Sync Gateway to documents.
                - `DCP`: DCP-feed processing.
                - `Events`: Event processing (webhooks).
                - `gocb`: All logging emitted by the GoCB SDK
                - `HTTP`: All requests made to the Sync Gateway REST APIs. This is the default setting.
                - `HTTP+`: Additional information about HTTP requests (response times, status codes).
                - `Import`: Introduced in Sync Gateway 1.5 to help troubleshoot the import process of a document (this is the Sync Gateway process to make a document that was added through N1QL or the Server SDKs mobile-aware). This log key can be useful to troubleshoot why a given document was not successfully imported.
                - `Javascript`: All logging from Javascript. This includes: sync function, import filters, webhook filter function, and the custom ISGR conflict resolvers
                - `Migrate`: Logs messages that show when old inline document metadata is upgraded to xattrs
                - `Query`: Query is used for Sync Gateway code related to N1QL queries
                - `Replicate`: Log messages related to replications between Sync Gateways (using sg-replicate). This tag cannot be used for replications initiated by Couchbase Lite.
                - `SGCluster`: Log messages related to the sharded import and HA sg-replicate
                - `Sync`: Activity which relates to synchronization between Couchbase Lite and Sync Gateway
                - `SyncMsg`: Can be used for additional Sync logging output
                - `WS`: Websocket replication log messages
                - `WSFrame`: Can be used for additional WS logging output
              type: array
              items:
                type: string
              default: '["HTTP"]'
            color_enabled:
              type: boolean
              default: 'false'
              description: Use ANSI color codes in the console output (Linux/MacOS only).
            file_output:
              type: string
              description: |+
                Changes require full logging re-initialization
        error:
          description: |+
            The level of logging as a key. Log levels accumulate as you read down the table (i.e log entries at WARN will also be included in the INFO and DEBUG logs).

            | Level| Description| Minimum max_age| Log File Name|
            | :---| :---| :---| :---|
            | ERROR| Critical error messages.| 180 days| sg_error.log|
            | WARN| Something is wrong but SG can still service requests| 90 days| sg_warn.log|
            | INFO| Important diagnostics for support and customers| 3 days| sg_info.log|
            | DEBUG| Lower level development analysis| 1 day| sg_debug.log|

            Each log level takes a dictionary as value and various properties can set for each log level. For example:

            ```javascript
            "logging": {
                "log_file_path": "/home/sync_gateway/logs", // Where to put log files
                "console": {
                    "log_level": "info",  // What level to output to console - [error|+warn|+info|+debug|+none]
                    "log_keys": ["HTTP"], // What log keys to output to console (comma separated)
                    "color_enabled": true
                },
                "error": {
                    "enabled": true,
                    "rotation": {
                        "max_size": 100,    // Threshold in megabytes to rotate logs
                        "max_age": 360,     // Maximum days to retain log files (Min: 180)
                        "localtime": false // Use local computer's time on backup timestamps (false=UTC)
                    }
                },
                "warn": {
                    "enabled": true,
                    "rotation": {
                        "max_size": 100,
                        "max_age": 180,     // (Minimum: 90)
                        "localtime": false
                    }
                },
                "info": {
                    "enabled": true,
                    "rotation": {
                        "max_size": 100,
                        "max_age": 6,     // (Minimum: 3)
                        "localtime": false
                    }
                },
                "debug": {
                    "enabled": false,
                    "rotation": {
                        "max_size": 100,
                        "max_age": 2,     // (Minimum: 1)
                        "localtime": false
                    }
                }
            }

            ```

            Changes require full logging re-initialization
          type: object
          properties:
            enabled:
              description: |+
                Whether to enable this log level.
                The *error*, *warn* and *info* log levels are enabled by default.
                The *debug* log level is disabled by default.

                Note, however, that you are advised to keep this log level enabled to troubleshoot issues. Enabling this log level is a requirement to receive [Enterprise Support](https://www.couchbase.com/support-policy).
              type: boolean
            rotation:
              type: object
              description: |+
                The log file may be rotated by defining a "rotation" sub document. See details in the table below.
              properties:
                max_size:
                  type: integer
                  description: The maximum size in MB of the log file before it gets rotated.
                  default: 100
                max_age:
                  type: integer
                  description: The maximum number of days to retain old log files. This can't be set below the minimum allowed value for the given level.
                localtime:
                  type: boolean
                  description: If true, it uses the computer's local time to format the backup timestamp. False uses UTC.
                  default: 'false'
                rotated_logs_size_limit:
                  type: integer
                  default: 1024
                  description: |+
                    Controls how much disk space the rotated (and compressed) log files for this level can take up.

                    The value is expressed in megabytes.
                    The minimum value is `10` and there is no maximum value.
            collation_buffer_size:
              type: integer
              description: |+
                Size of the collation buffer

        warn:
          description: |+
            The warning logging-level is triggered when Sync Gateway detects something is wrong but it can still service requests

            - Minimum max_age is 90 days
            - Log File Name is ```sg_wan.log```

          type: object
          properties:
            enabled:
              description: |+
                Whether to enable this log level.
                The *error*, *warn* and *info* log levels are enabled by default.
                The *debug* log level is disabled by default.

                Note, however, that you are advised to keep this log level enabled to troubleshoot issues. Enabling this log level is a requirement to receive [Enterprise Support](https://www.couchbase.com/support-policy).
              type: boolean
            rotation:
              type: object
              description: |+
                The log file may be rotated by defining a "rotation" sub document. See details in the table below.
              properties:
                max_size:
                  type: integer
                  description: The maximum size in MB of the log file before it gets rotated.
                  default: 100
                max_age:
                  type: integer
                  description: The maximum number of days to retain old log files. This can't be set below the minimum allowed value for the given level.
                localtime:
                  type: boolean
                  description: If true, it uses the computer's local time to format the backup timestamp. False uses UTC.
                  default: 'false'
                rotated_logs_size_limit:
                  type: integer
                  default: 1024
                  description: |+
                    Controls how much disk space the rotated (and compressed) log files for this level can take up.

                    The value is expressed in megabytes.
                    The minimum value is `10` and there is no maximum value.
            collation_buffer_size:
              type: integer
              description: |+
                Size of the collation buffer

        info:
          type: object
          description: |+
            The information logging-level provides important diagnostics for support and customers
          properties:
            enabled:
              type: boolean
              default: true
              description: |+
                Whether to enable this log level.

            rotation:
              type: object
              description: |+
                The log file may be rotated by defining a "rotation" sub document
              properties:
                max_size:
                  type: integer
                  description: The maximum size in MB of the log file before it gets rotated.
                  default: 100
                max_age:
                  type: integer
                  description: The maximum number of days to retain old log files. This can't be set below the minimum allowed value for the given level.
                localtime:
                  type: boolean
                  description: If true, it uses the computer's local time to format the backup timestamp. False uses UTC.
                  default: 'false'
                rotated_logs_size_limit:
                  type: integer
                  default: 1024
                  description: |+
                    Controls how much disk space the rotated (and compressed) log files for this level can take up.

                    The value is expressed in megabytes.
                    The minimum value is `10` and there is no maximum value.
            collation_buffer_size:
              type: integer
              description: |+
                Size of the collation buffer

        debug:
          type: object
          description: |+
            The debug logging-level provides lower level development analysis

            - Minimum max_age is 1 day
            _ Log File Name is ```sg_debug.log```
          properties:
            enabled:
              type: boolean
              default: false
              description: |+
                Sets this logging-level on or off.

                Note, you are advised to keep this log level enabled when troubleshooting issues.
                Enabling this log level is a requirement to receive [Enterprise Support](https://www.couchbase.com/support-policy).
            rotation:
              type: object
              description: |+
                The log file may be rotated by defining a "rotation" sub document. See details in the table below.
              properties:
                max_size:
                  type: integer
                  description: The maximum size in MB of the log file before it gets rotated.
                  default: 100
                max_age:
                  type: integer
                  description: The maximum number of days to retain old log files. This can't be set below the minimum allowed value for the given level.
                localtime:
                  type: boolean
                  description: If true, it uses the computer's local time to format the backup timestamp. False uses UTC.
                  default: 'false'
                rotated_logs_size_limit:
                  type: integer
                  default: 1024
                  description: |+
                    Controls how much disk space the rotated (and compressed) log files for this level can take up.

                    The value is expressed in megabytes.
                    The minimum value is `10` and there is no maximum value.
            collation_buffer_size:
              type: integer
              description: |+
                Size of the collation buffer

        trace:
          type: object
          description: |+
            The trace logging-level.
          properties:
            enabled:
              type: boolean
              default:
              description: |+
                Whether to enable this log level.

            rotation:
              type: object
              description: |+
                The log file may be rotated by defining a "rotation" sub document. See details in the table below.
              properties:
                max_size:
                  type: integer
                  description: The maximum size in MB of the log file before it gets rotated.
                  default: 100
                max_age:
                  type: integer
                  description: The maximum number of days to retain old log files. This can't be set below the minimum allowed value for the given level.
                localtime:
                  type: boolean
                  description: If true, it uses the computer's local time to format the backup timestamp. False uses UTC.
                  default: 'false'
                rotated_logs_size_limit:
                  type: integer
                  default: 1024
                  description: |+
                    Controls how much disk space the rotated (and compressed) log files for this level can take up.

                    The value is expressed in megabytes.
                    The minimum value is `10` and there is no maximum value.
            collation_buffer_size:
              type: integer
              description: |+
                Size of the collation buffer

        stats:
          type: object
          description: |+
            The stats logging level
          properties:
            enabled:
              type: boolean
              default:
              description: |+
                Whether to enable this log level.
            rotation:
              type: object
              description: |+
                The log file may be rotated by defining a "rotation" sub document. See details in the table below.
              properties:
                max_size:
                  type: integer
                  description: The maximum size in MB of the log file before it gets rotated.
                  default: 100
                max_age:
                  type: integer
                  description: The maximum number of days to retain old log files. This can't be set below the minimum allowed value for the given level.
                localtime:
                  type: boolean
                  description: If true, it uses the computer's local time to format the backup timestamp. False uses UTC.
                  default: 'false'
                rotated_logs_size_limit:
                  type: integer
                  default: 1024
                  description: |+
                    Controls how much disk space the rotated (and compressed) log files for this level can take up.

                    The value is expressed in megabytes.
                    The minimum value is `10` and there is no maximum value.
            collation_buffer_size:
              type: integer
              description: |+
                Size of the collation buffer




  bucket_configuration_model:
    type: object
    title: bucket_configuration_model
    description: |+
      Defines the Couchbase Server bucket to which this Sync Gateway database is associated.

      *Note:* ReadOnly data in this object is drawn from the Bootstrap Configuration and cannot be changed using the REST API.

    required:
    - server
    - bucket
    - username
    - password

    properties:

      server:
        type: string
        readOnly: true
        description: |+
          Read-only item inherited from the bootstrap configuration file; cannot be changed using the REST API.

          Defines the Couchbase Server connection string.

      bucket:
        type: string
        default: database name
        description: |+
          The `bucket` property defines the Couchbase Server bucket name for this database.

          If not specified, then the database `name` is used as the `bucket` name.

      username:
        readOnly: true
        type: string
        description: |+
          The item defines the RBAC user's username for authenticating to Couchbase Server.

          There is no default.

      password:
        readOnly: true
        type: string
        description: |+
          The item defines the RBAC user's password for authenticating to Couchbase Server.

          There is no default.

      certpath:
        readOnly: true
        type: string
        description: |+
          Absolute or relative path on the filesystem to the TLS certificate file to be used to connect to the Couchbase Server.

          Relative paths are relative to the directory that contains the Sync Gateway executable.

      keypath:
        readOnly: true
        type: string
        description: |+
          Absolute or relative path on the filesystem to the TLS private key file to be used to connect to the Couchbase Server.

          Relative paths are relative to the directory that contains the Sync Gateway executable.

      cacertpath:
        readOnly: true
        type: string
        description: |+
          Absolute or relative path on the filesystem to the root CA certificate to verify the certificate chain and hostname of the Couchbase Server cluster.

          Required for X509 Authentication.

          Relative paths are relative to the directory that contains the Sync Gateway executable.

      kv_tls_port:
        readOnly: true
        type: string
        description: |+
          Unused item

  database_configuration_model:
    type: object
    title: "Database Configuration Model"
    description: |+
      The `database_configuration_model` object defines the configuration of a given Sync Gateway database.
    properties:

      bucket_configuration:
        type: object
        title: bucket_configuration_model
        description: |+
          Defines the Couchbase Server bucket to be used for this Sync Gateway database
        $ref: "#/definitions/bucket_configuration_model"

      name:
        type: string
        description: |+
          Use `name` to define the Sync Gateway database name.

          Change initiates database restart

      sync:
        $ref: '#/definitions/sync_function_model'

      users:
        type: object
        title: user_configuration_model
        description: |+
          Defines the user(s) for this Sync Gateway database
        $ref: "#/definitions/user_configuration_model"

      roles:
        type: object
        title: role_configuration_model
        description: |+
          Defines the role(s) for this Sync Gateway database
        $ref: "#/definitions/role_configuration_model"

      revs_limit:
        type: integer
        description: |+
          This property defines the maximum depth to which a document's revision tree can grow; its value governs the point at which to prune a document's revision tree.

          The default and minimum values of `revs_limit` are dependent on whether [allow_conflicts](config-properties.html#databases-this_db-allow_conflicts) is set True or False -- see the *Default and Minimum Values* table below.

          The process to remove obsolete revisions is called pruning and runs automatically every time a revision is added. Although fundamentally the same, the pruning algorithm works slightly differently between Sync Gateway and Couchbase Lite. On Sync Gateway, the pruning algorithm is applied to the shortest, non-tombstoned branch in the revision tree.

          If there are conflicting revisions, the document may end up with **disconnected branches** after the pruning process. In the animation below, the document has a conflicting branch (revisions `4'` - `1001'`). When the shortest branch (in this case the conflicting branch) reaches the 1003rd update, it gets is cut off. The revision tree is not in a corrupted state and the logic that chooses the winning revision still applies. But it may make it impossible to do certain merges (n-way merge) to resolve conflicts and will occupy disk space that could have been freed if the conflict was resolved early on.<br><br>

          ![](https://cl.ly/3C1G3t3R1v19/pruning-sg.gif)

          If the revision tree gets into this state then the only option to resolve the conflict is to pick a winning branch and tombstone all the non-winning conflicting branches.

          **NOTE:** Setting the `revs_limit` to a value below 100 when `allow_conflicts = true` may adversely affect the conflict resolution process, as there may be insufficient revision history to resolve a given conflict.

          #### Default and Minimum Values

          **For Releases 2.6+**

          allow_conflicts =|+ True |+ False
            :--- |+ :-------: |+ :-------:
          `revs_limit` default |+ 100 |+ 50 |+
          `revs_limit` minimum |+ 20 |+ 1 |+

          **For Releases 2.0 - 2.5**

            allow_conflicts = |+ <-- True --> |+<-- False -->
            :--- |+ :-------: |+ :-------:
            `revs_limit` default  |+ 100 |+ 1000
            `revs_limit` minimum  |+ 50 |+ 1

          **For Release 1.x**
          - `revs_limit` default = 1000
          - `revs_limit` minimum = 20

          See also:
          - Sync Gateway purge endpoint [/{db}/_purge](admin-rest-api.html#/document/post__db___purge).
          - Sync Gateway [document TTLs](admin-rest-api.html#/document/put__db___doc_).

          minimum -- see Default and Minimum Values table in description

        default: see Default and Minimum Values table in Description

      import_docs:
        type: boolean
        description: |+
          Use the `import_docs` property to define whether the Sync Gateway node should automatically import Couchbase Server documents;

          This property works in conjunction with the `enable_shared_bucket_access` property, which enables Xattrs.

          Since Sync Gateway 2.7, all Sync Gateway nodes can be configured as import nodes. This results in performance benefits as the import process is shared across all Sync Gateway nodes.
          Prior to version 2.7, `import_docs` can only be set to `true` on a single node.

          Changes initiate a database restart

        default: 'false'

      import_partitions:
        type: integer
        description: |+
          Use the `import_partitions` property to define how many import partitions should be used for import sharding.

          Partitions are distributed among all Sync Gateway nodes participating in import processing (import_docs:true), and each process a subset of the server's vbuckets.

          Each partition is processed by a separate goroutine, so `import_partitions` can be used to tune concurrency based on the number of Sync Gateway nodes, and the number of cores per node.

        default: 16

      import_filter:
        type: string
        description: |+
          Use the `import_filter` property to define whether a document written to the Couchbase Server bucket should be made available to Couchbase Mobile clients (that is, it should be imported).

          This JavaScript filter function takes the document body as parameter and is expected to return a boolean to indicate whether the document should be imported.

          ```json
          {
            "databases": {
              "db": {
                "server": "http://localhost:8091",
                "bucket": "default",
                "password": "password",
                "import_docs": true,
                "enable_shared_bucket_access": true,
                "import_filter": `
              function(doc) {
                if (doc.type != "mobile") {
                  return false
                }
                return true
              }
              `,
              }
            }
          }
          ```
        default: function(doc) {return false;}

      import_backup_old_rev:
        type: string
        description: |+
          Use the `import_backup_old_rev` property to define whether import should attempt to create a temporary backup of the previous revision body, when available

      event_handlers:
        type: object
        title: "Event Handler Model"
        description: |+
          Webhooks in Sync Gateway are designed to minimize performance impacts on Sync Gateway's regular processing.

          Sync Gateway manages the number of processes that are spawned for webhook event handling, so that slow response times from the HTTP POST operations don't consume available CPU resources on Sync Gateway nodes.

          When a `webhook` event handler is defined, after Sync Gateway has updated a document, Sync Gateway adds a `document_changed` event to an asynchronous event-processing queue (the event queue).

          New processes are then spawned to apply the `filter` function to the documents and to perform the HTTP POST operations.

          When an event is not added to the event queue, but is instead discarded, a warning message is written to the the Sync Gateway log.

          You can configure Sync Gateway to log information about event handling, by including either the log key ```Event``` or ```Events+``` in the `Log` property in your Sync Gateway configuration file. `Events+` is more verbose.

          See also: {webhooks--xref}

        properties:
          document_changed:
            description: The configuration for the action to perform when a document change is detected.
            type: array
            items:
              # type: object
              title: "Document Changed Model"
              properties:
                filter:
                  type: string
                  description: |+
                    Use ```document_changed.filter``` to define a JavaScript function that determines which documents to post.

                    The filter function accepts the document body as input and returns a boolean value.

                    -- If the filter function returns true, then Sync Gateway posts the document.
                    -- If the filter function returns false, then Sync Gateway does not post the document.
                    -- If no filter function is defined, then Sync Gateway posts all changed documents.

                    Filtering only determines which documents to post.
                    It does not extract specific content from documents and post only that.
                  # required: 'true'
                handler:
                  type: string
                  description: |+
                    Specify the type of event handler.

                    This must be `webhook` currently).
                options:
                  type: string
                  description: |+
                    Options can be specified per-handler, and are specific to each handler type.
                timeout:
                  type: integer
                  description: |+
                    Defines the period in seconds to wait for a response to the POST operation.

                    Using a timeout ensures that slow-running POST operations don't cause the webhook event queue to back up.

                    Slow-running POST operations are discarded (if they time out), so that new events can be processed. When the timeout is reached, Sync Gateway stops listening for a response.

                    A value of 0 (zero) means no timeout.

                    You should not need to adjust it to tune performance as he default value should work well in the majority of cases.
                  default: 60
                url:
                  description: |+
                    Defines the URL to post documents to (for a webhook event handler).
                  type: string
                  # required: true
          db_state_changed:
            type: array
            description: |+
                Use the `db_state_changed` property group to define the actions to perform when a `db_state` change is detected.
            items:
              title: db_state_changed model
              type: object
              properties:
                filter:
                  type: string
                  description: |+
                    Use `db_state_changed.filter``` to define a JavaScript function that determines which state changes to post.

                handler:
                  type: string
                  description: |+
                    Specify the type of event handler.

                    This must be `webhook` currently).
                options:
                  type: string
                  description: |+
                    Options can be specified per-handler, and are specific to each handler type.
                timeout:
                  type: integer
                  description: |+
                    Defines the period in seconds to wait for a response to the operation.

                  default: 60
                url:
                  description: |+
                    Defines the URL to post to (for a webhook event handler).
                  type: string
                  # required: true
          max_processes:
            type: integer
            description: |+
              Maximum number of events that can be processed concurrently, that is, no more than `max_processes` concurrent processes will be spawned for event handling.

              The default value should work well in the majority of cases.
              You should not need to adjust it to tune performance.
              However, if you wish to ensure that most webhook posts are sent, you can set it to sufficiently high value.
            default: 500
          wait_for_process:
            type: string
            description: |+
              Maximum wait time in milliseconds before canceling event processing for an event that is detected when the event queue is full.

              If you set the value to 0 (zero), then incoming events are discarded immediately if the event queue is full.

              If you wish to avoid any blocking of standard Sync Gateway processing this may be a desirable value to use.

              The default value should work well in the majority of cases. You should not need to adjust it to tune performance.
            default: 100
      allow_empty_password:
        type: boolean
        description:
          Use ```allow_empty_password``` to define whether to Sync Gateway users can be created with empty passwords.
        default: 'false'

      cache:
        type: object
        title: "Cache Model"
        description: |+
          The `cache` group of properties define the  configuration for this database's channel and revision caches

        properties:
          rev_cache:
            type: object
            title: "Revision Cache Model"
            description: |+
              Use the `rev_cache` properties to configure the revision cache
            properties:
              size:
                type: integer
                description: |+
                  Size of the revision cache, specified as the total number of document revisions to cache in memory for all recently accessed documents. When the revision cache is full, Sync Gateway removes less recent document revisions to make room for new document revisions. Adjust this property to tune memory consumption by Sync Gateway, for example on servers with less memory and in cases when Sync Gateway creates many new documents and/or updates many documents relative to the number of read operations.

                  *Disabling the revision cache*

                  Disabling the revision cache is an [Enterprise Edition](https://www.couchbase.com/products/editions) feature.

                  To disable the revision entirely, set this property to 0. Setting this property to 0 on the Community Edition is ignored.

                  Disabling the revision cache would be useful when there are very large documents or if you expect a very low cache hit rate. Otherwise it could negatively impact the latency of replications. It is generally not recommended to disable the revision cache, unless advised by Couchbase [Enterprise Support](https://www.couchbase.com/support-policy).
                default: 5000
              shard_count:
                type: integer
                description: |+
                  Tuning this property is an [Enterprise Edition](https://www.couchbase.com/products/editions) feature.
                  The Community Edition is configured with the default value, and will ignore any value in the configuration file.

                  Number of shards the rev cache should be split into. More shards allows for lower cache contention when accessing distinct revisions, at the cost of some memory overhead per-shard. This generally should not greatly exceed the number of CPU threads available to Sync Gateway.

                  It is generally not recommended to set this property, unless advised by Couchbase [Enterprise Support](https://www.couchbase.com/support-policy).
                default: 8

          channel_cache:
            type: object
            title: "Channel Cache Model"
            description: |+
              Use the `channel_cache` group's properties to configure the database's channel cache

              Changes initiate a database restart
            properties:
              compact_high_watermark_pct:
                type: integer
                description: |+
                  Use ```compact_high_watermark_pct``` to define the trigger value for starting channel cache eviction.
                  Specify the value as a percentage (of ```max_number```)

                  When the cache size, determined by `max_number`, reaches the high watermark, the eviction process iterates through the cache, removing inactive channels.
                default: 80
              compact_low_watermark_pct:
                type: integer
                description: |+
                  Use ```compact_low_watermark_pct``` to define the trigger value for stopping channel cache eviction.
                  Specify the value as a percentage (of ```max_number```)

                  When the cache size, determined by `max_number` returns to a value lower than `compact_low_watermark_pct`, the cache eviction process is stopped.
                default: 60

              enable_star_channel:
                type: boolean
                description: |+
                  Use ```enable_star_channel``` to define whether Sync GAteway should use the all documents (*) channel -- sometimes referred to as the 'star' channel.

                default: 'true'

              expiry_seconds:
                type: integer
                description: |+
                  Use ```expiry_seconds``` to define how long (in seconds) Sync Gateway should keep cached entries beyond the minimum retained.
                default: 60

              max_length:
                type: integer
                description: |+
                  Maximum number of entries maintained in cache per channel.
                default: 500

              max_num_pending:
                type: integer
                description: |+
                  Use ```max_num_pending``` to define the maximum number of pending sequences before skipping the sequence.
                default: 10000

              max_number:
                type: integer
                description: |+
                  Use ```max_number``` to define the maximum number of channel caches allowed at any one point.
                  This property is used alongside the associated eviction watermarks ```compact_low_watermark_pct``` and ```compact_high_watermark_pct``` to control the cache size.

                  The default value for this property is 50000.
                  Assuming the default channel `min_length` and `max_length` values, this would result in a memory usage under 1GB.

                  Tuning this property is an [Enterprise Edition](https://www.couchbase.com/products/editions) feature -- in the Community Edition any change to the default value is ignored.

                  *Enterprise Edition Only*: The `max_number` value can be tuned to optimize for cache hits (requests that are handled using the cache), as opposed to cache misses (requests that require a round-trip to Couchbase Server to fetch data). The cache hit/miss ratio can be obtained with the following:

                  ```cache hit/miss ratio``` = ```cache.chan_cache_hits``` / ```cache.chan_cache_misses```

                  Increasing the `max_number` value can increase the cache hit/miss ratio, resulting in better cache utilization.

                  If the cache size grows to reach the high watermark (`compact_high_watermark_pct`), channels with no connected replications will be evicted before channels which are associated with an active pull replication (i.e a blip-based pull replication in Couchbase Lite 2.x, or an active `/{db}/_changes` request in Couchbase Lite 1.x).

                  The minimum allowed value is 100.

                  It isn't possible to remove the limit altogether, users who wish to remove the limit would need to set `max_number` to an arbitrarily high value.
                default: 50000

              max_wait_pending:
                type: integer
                description: |+
                  Maximum wait time in milliseconds for a pending sequence before skipping sequences.
                default: 5000

              max_wait_skipped:
                type: integer
                description: |+
                  Maximum wait time in milliseconds for a skipped sequence before abandoning the sequence.
                default: 3600000
              min_length:
                type: integer
                description: |+
                  Minimum number of entries maintained in cache per channel.
                default: 50
              query_limit:
                type: integer
                default: 5000
                description: Limit used for channel queries

      offline:
        type: boolean
        description: |+
          Use `offline` to determine whether Sync Gateway should start the database in offline mode.

          The default of false means the database will be online.
        default: false

      unsupported:
        title: "Unsupported Properties Model"
        type: object
        description: |+
          This group comprises an unrelated collection of unsupported properties that may, potentially, be useful in controlled testing scenarios.

          NOTE: Due to the unsupported nature of these options, there is no guarantee on their continued availability.
        properties:
          api_endpoints:
            type: object
            properties:
              enable_couchbase_bucket_flush:
                type: boolean
                description: |+
                  Determines whether Couchbase buckets can be flushed using the Admin REST API.

                  Use *only* for testing purposes if it is necessary to flush data in between tests to start with a clean DB.

          oidc_tls_skip_verify:
            type: boolean
            default: 'false'
            description: |+
              Unsupported option for use in development and testing environment ONLY

              `oidc_tls_skip_verify` can be used to enable the use of self-signed certs for OpenID Connection testing.

          oidc_test_provider:
            type: object
            description:  Config settings for OIDC test provider
            properties:
              enabled:
                type: boolean
                description: |+
                  Unsupported option for use in development and testing environment ONLY

                  Determines whether the oidc_test_provider endpoints should be exposed on the public API.
          remote_config_tls_skip_verify:
            type: boolean
            default: 'false'
            description: |+
              Unsupported option for use in development and testing environment ONLY

              Use only to enable self signed certificates for testing external JavaScript load.
          sgr_tls_skip_verify:
            type: boolean
            default: 'false'
            description: |+
              Unsupported option for use in development and testing environment ONLY

              `sgr_tls_skip_verify` can be used to skip validation of TLS certs used for Inter-Sync Gateway Replication.

          user_views:
            type: object
            description: Configuration settings for user views
            default: 'none'
            properties:
              user_views_enabled:
                type: boolean
                description: |+
                  Unsupported option for use in development and testing environment ONLY

                  Use to determine whether pass-through view query is supported through public API

          warning_thresholds:
            type: object
            title: "Warning Threshold Model"
            properties:
              access_and_role_grants_per_doc:
                type: boolean
                description: |+
                  Number of access and role grants per document to be used as a threshold for grant count warnings
              channels_per_doc:
                type: boolean
                description: |+
                  Number of channels per document to be used as a threshold for channel count warnings
              channels_per_user:
                type: boolean
                description: |+
                  Number of channels per user to be used as a threshold for channel count warnings
              channel_name_size:
                type: boolean
                description: |+
                  Number of channel name characters to be used as a threshold for channel name warnings


              xattr_size_bytes:
                type: boolean
                description: |+
                  Number of bytes to be used as a threshold for XATTR size limit warnings
          disable_clean_skipped_query:
            type: boolean
            description: Clean skipped sequence processing bypasses final check

      oidc:
        type: object
        title: "OIDC Group Model"
        description: |+
          Use the `oidc` object properties to defined any OpenID Connect providers and associated credentials.
        properties:
          default_provider:
            type: string
            description: |+
              Use this `default_provider` property to identify the provider to use for OIDC requests that do not specify a provider.

              If only one provider is specified in the providers map, then that is used as the default provider.
              If multiple providers are defined and default_provider is not specified, requests to ```/db/_oidc``` must specify the provider parameter.

          providers:
            title: "OIDC Providers Model"
            description: Include an entry for each OIDC provider
            type: object
            properties:
              this_provider:
                title: "OIDC Provider Model"
                type: object
                properties:

                  issuer:
                    type: string
                    description: The OpenID Connect Provider issuer.

                  register:
                    type: string
                    description: |+
                      Whether Sync Gateway should automatically create users for successfully authenticated users that don't have an already existing user in Sync Gateway.

                      Optional.

                  client_id:
                    type: string
                    description: The client ID defined in the provider for Sync Gateway.

                  validation_key:
                    type: string
                    description: Client secret associated with the client. Required for auth code flow.

                  callback_url:
                    type: string
                    description: |+
                      The callback URL to be invoked after the end-user obtains a client token.
                      When not provided, Sync Gateway will generate it based on the incoming request.

                      *Optional*

                  disable_session:
                    type: string
                    description: |+
                      By default, Sync Gateway will create a new session for the user upon successful OIDC authentication, and set that session in the usual way on the _oidc_callback and _oidc_refresh responses.

                      If disable_session is set to true, the session is not created (clients must use the ID token for subsequent authentications).

                      *Optional*

                  scope:
                    type: [string]
                    description: |+
                      By default, Sync Gateway uses the scope "openid email" when calling the OP's authorize endpoint.

                      If the scope property is defined in the config (as an array of string values), it will override this scope.

                      *Optional. *

                  include_access:
                    type: string
                    description: Optional. When true, the oidccallback response will include the access_token, expires_at and token_type properties returned by the OP.

                  user_prefix:
                    type: string
                    description: Optional. Specifies the prefix for Sync Gateway usernames for the provider. When not specified, defaults to issuer.

                  discovery_url:
                    type: string
                    description: Optional. Discovery URL used to obtain the OpenID Connect provider configuration. If not specified, the default discovery endpoint of [issuer]/.well-known/openid-configuration will be used.

                  disable_cfg_validation:
                    default: 'false'
                    type: boolean
                    description: |+
                      Couchbase Sync Gateway, by default, applies strict validation of the OpenID Connect configuration based on the OIDC specification.

                      Set ```"disable_cfg_validation": true``` when you do not want strict validation of the OIDC configuration.

                  disable_callback_state:
                    default: 'false'
                    type: boolean
                    description: |+
                      DisableCallbackState determines whether or not to maintain state between the ```/_oidc``` and
                      ```/_oidc_callback``` endpoints.

                      Disabling this action is NOT recommended as it will increase vulnerability to Cross-Site Request Forgery (CSRF, XSRF).

                      Set ```"disable_callback_state": true``` to switch-off callback state.

                  username_claim:
                    type: string
                    default: 'optional'
                    description: |+

                        You can use `username_claim` to specify a claim other than subject to use as the Sync Gateway username.

                        The specified claim must be a string, as numeric claims may be un-marshalled inconsistently between Sync Gateway and the underlying OIDC library.

                        When authenticating incoming OIDC tokens, Sync Gateway currently treats the username as [user_prefix]_[subject].
                        By default user_prefix is the issuer, but can be customized in the Sync Gateway provider config.
                        Subject is always the sub claim in the token.

                        Behavior:

                        - If username_claim is set but user_prefix is not set, use that claim as the Sync Gateway username.
                        - If username_claim is set and user_prefix is also set, use [user_prefix]_[username_claim] as the Sync Gateway username.
                        - If username_claim is not set and user_prefix is set, use [user_prefix]_[subject] as the Sync Gateway username (existing behavior).
                        - If neither username_claim nor user_prefix are set, use [issuer]_[subject] as the Sync Gateway username (existing behavior).

                  allow_unsigned_provider_tokens:
                    type: boolean
                    default: 'false'
                    description: |+
                      Unsigned provider tokens are not accepted.

                      Set ```"allow_unsigned_provider_tokens": true``` to opt-in to accepting unsigned tokens from providers.

      old_rev_expiry_seconds:
        type: integer
        description: |+
          Use the `old_rev_expiry_seconds` property to define the number of seconds before old revisions are removed from Couchbase Server buckets.

      view_query_timeout_secs:
        type: integer
        description: |+
          Use the `view_query_timeout_secs` property to define the view query timeout in seconds.

          This is the time Sync Gateway should wait for a view query response from Couchbase Server before it times out.

          The timeout applies to both view and N1QL queries issued by Sync Gateway.
        default: 75

      local_doc_expiry_secs:
        type: integer
        description: |+
          Use the `local_doc_expiry_secs` property to define an expiry value for local documents managed on Sync Gateway.

          Local documents are used by the Couchbase Lite replicator to track up to which sequence number a given client has synchronized and where it should resume the next time it connects to Sync Gateway.

          Clients failing to replicate within the expiry window are forced to restart their replication from the beginning (sequence zero).

          This property is intended to minimize accumulation of obsolete replication checkpoint documents in the Couchbase Server bucket.

          The default is `7776000` seconds (90 days).
        default: 7776000

      enable_shared_bucket_access:
        type: boolean
        description: |+
          **Deprecated at 3.0**

          use the `enable_shared_bucket_access` property to define whether to use extended attributes to store sync metadata; this is required to enable mobile-to-server data sync (_mobile convergence_).

          You can learn more about this functionality in [Syncing with Couchbase Server](sync-with-couchbase-server.html)

          This property works in conjunction with the  ```import_docs``` property, which determines whether a node participates in import processing.

          Set `enable_shared_bucket_access` to `true` on all nodes participating in such a configuration.

          On start-up, Sync Gateway will generate the mobile-specific metadata for all the pre-existing documents in the Couchbase Server bucket. From then on, documents can be inserted on the Server directly (with N1QL or SDKs) or through the Sync Gateway REST API.

          Change initiates a database restart
        default: 'false'

      session_cookie_secure:
        type: boolean
        default: 'true'
        description: |+
          Override secure cookie flag (that is, disable secure cookies).

          If SSLCert is set, then secure cookies are also used by default. However, this flag can be set `false` to override this behavior and allow insecure cookies to be used alongside SSL.

          If SSLCert is not set then this flag defaults to false.

      session_cookie_name:
        type: string
        description: |+
          Starting in Sync Gateway 2.0, it is possible to customize the session cookie name that is used for this database.

          This property is mostly used by web applications interacting with multiple Sync Gateway databases.

          Browsers typically have two methods of determining which cookie to use for a given request: the `URL` path, or the cookie name.

          Use this property, to set different cookie names for each database specified in the configuration file. Let's consider the following configuration file:

          ```json
          {
              "interface":":4984",
              "log":["*"],
              "databases": {
                "db1": {
                  "session_cookie_name": "CustomName1",
                  "server": "http://localhost:8091",
                  "bucket": "bucket-1",
                  "users": {
                      "user_1": {"password":"1234"}
                  },
                  "db2": {
                    "session_cookie_name": "CustomName2",
                    "server": "http://localhost:8091",
                    "bucket": "bucket-2",
                    "users": {
                        "adam_2": {"password":"5678"}
                    }
                  }
                }
              }
          }
          ```

          With this configuration, the `Set-Cookie` response header of the POST `:4984/{db}/_session` endpoint (Public REST API) would then have the form "CustomName1=3cad4b95524179bf144fe0d92b8f09877bb86bf5;path=/db1/".

          When using POST `:4985/{db}/_session` (Admin REST API) to create a session, the cookie value is returned in the response body instead of the `Set-Cookie` header. In this case, it could also be set by the client, for web applications it would be the following in JavaScript:

          ```javascript
          cookie1String = "CustomName1=3cad4b95524179bf144fe0d92b8f09877bb86bf5;path=/db1/";
          document.cookie = cookie1String;
          ```
        default: 'SyncGatewaySession'

      session_cookie_http_only:
        type: boolean
        default: 'false'
        description:  This flag disallows cookies from being used by Javascript; by default javascript CAN use them

      allow_conflicts:
        type: boolean
        description: |+
          **Deprecated at 3.0 **

          Use ```allow_conflict``` to define whether Sync Gateway will handle conflicts.

          The default of ```true``` indicates that conflicts are handled.

          Set the value to ```false``` to cause Sync Gateway to reject any attempt to write conflicting revisions (returning a `409` HTTP status code).
          It will be up to the client to resolve the conflict.

          Restarting Sync Gateway with this property enabled will not automatically result in disk space savings (compaction on a document won't occur until a document is updated).

          *Constraints:*
          - Push replications to pre-2.8 targets do not support the `"allow_conflicts": false` setting; the target must use `"allow_conflicts": true`.

          Change initiates a database restart.
        default: 'true'

      num_index_replicas:
        type: integer
        description: |+
          use `num_index_replicas` property to define the number of index replicas used when creating the core Sync Gateway indexes.

          Only applicable if `databases.$db.use_views` is set to `false` (default value).

          Change initiates a database restart.
        default: 1

      use_views:
        type: boolean
        description: |+
          If set to `true`, Sync Gateway will use views instead of GSI for system functions like authentication and replication.
        default: 'false'

      send_www_authenticate_header:
        type: boolean
        description: Whether to send WWW-Authenticate header in 401 responses.
        default: 'true'

      bucket_op_timeout_ms:
        type: integer
        description: |+
          Use ```bucket_op_timeout_ms``` to define how long Sync Gateway will wait for a bucket operation to complete before timing out and trying again.

          You may increase this value where there is a heavy load on Couchbase Server and operations are likely to take more than 2.5 seconds to complete.

          The default value is 2500 milliseconds.

          Changes initiate a database restart.
        default: 2500

      delta_sync:
        type: object
        title: "Delta Sync Model"
        description: |+
          *NOTE:* Delta Sync is an Enterprise Edition feature on Sync Gateway and Couchbase Lite.

          Use the `delta_sync ` object to specify the delta sync configuration properties.

          In this context, delta-sync, is the ability to replicate only those parts of a  Couchbase mobile document that have changed.
          This results in significant savings in bandwidth consumption as well as throughput improvements; both useful benefits when network bandwidth is typically constrained.

          Delta Sync does not apply to attachment contents.

          Delta Sync is disabled by default on the Sync Gateway. You can enable it through the `enabled` property.

          If delta sync is enabled on Sync Gateway, then Couchbase Lite clients will switch to using delta sync automatically.
          Similarly, if delta sync is disabled on Sync Gateway, clients will switch to normal mode.

          Changes initiate a database reload
        properties:
          enabled:
            type: boolean
            description: |+
              Use the ```delta_sync.enabled``` property to turn delta sync mode on or off for the given database.

              The following configuration example enables delta sync.

              ```json
              {
                "logging": {
                  "console": {
                    "log_keys": ["*"]
                  }
                },
                "databases": {
                  "db": {
                    "server": "http://localhost:8091",
                    "bucket": "default",
                    "users": { "GUEST": { "disabled": false, "admin_channels": ["*"] } },
                    "allow_conflicts": false,
                    "revs_limit": 20,
                    "delta_sync": {
                      "enabled": true,
                      "rev_max_age_seconds": 86400
                    }
                  }
                }
              }
              ```

              Footnotes

              -- Use of Delta Sync incurs additional bucket storage requirements which can be tuned with the [`rev_max_age_seconds`](#databases-this_db-delta_sync-rev_max_age_seconds) property.

              -- Delta Sync is automatically enabled for peer-to-peer sync between Couchbase Lite clients.

              -- Delta sync is disabled for Couchbase Lite database replicas.

              -- Push replications do not use Delta Sync when pushing to a pre-2.8 target.

            default: false
          rev_max_age_seconds:
            type: integer
            description: |+
              Use ```delta_sync.rev_max_age_seconds``` to adjust the time box within which deltas can be generated.

              On a write operation, the revision body is backed up in the bucket and retained for `rev_max_age_seconds` to calculate future revision deltas.
              As a result, new deltas can only be generated for read requests that come in within the `rev_max_age_seconds` time window.
              The storage of backed up revision bodies for delta sync incurs additional bucket storage requirements.

              The additional storage can be calculated with the following formula: `(doc_size * updates_per_day * 86400) / rev_max_age_seconds`.

              For example, with `rev_max_age_seconds`'s default value, an average document size of 4 KB and 100 writes/day, enabling delta sync would take up an additional 400 KB of storage on Couchbase Server (`(4 * 100 * 86400)/86400`).

              Setting this value to 0 will generate deltas opportunistically on pull replications, with no additional storage requirements.
            default: 86400

      compact_interval_days:
        type: number
        description: |+
          Use `` property to define the interval between scheduled compaction runs (in days).

          Set a zero (0) value to suppress running compactions.

          Change initiates a database restart.

      isgr_enabled:
        type: boolean
        default: 'true'
        description: |+
          Use the `isgr_enabled` property to define whether this Sync Gateway node can be assigned inter-Sync Gateway replications for this database.

          If set to false, the Sync Gateway node will not participate in inter-Sync Gateway replications.

      isgr_websocket_heartbeat_secs:
        type: integer
        default: 300
        description: |+
          If set, this duration (in seconds) is used as a custom heartbeat interval for websocket ping frames in inter-Sync Gateway replications.

      serve_insecure_attachment_types:
        type: boolean
        default: 'false'
        description: |+
          The sending of a content-disposition header for attachments with headers such as "text/html"
          forces a download, rather than browser rendering.

          Use this option to suppress sending the content-disposition, allowing the browser to render the attachment.

      query_pagination_limit:
        type: integer
        description: |+
          Use the `query_pagination_limit` property to define the Query limit to be used during pagination of large queries.

          Change initiates a database restart.

      slow_query_warning_threshold:
        type: integer
        default: 500
        description: |+
          The maximum wait time, in milliseconds,for N1QL or View queries made by Sync Gateway

          Log warnings if the run time of a N1QL or View query, made by Sync Gateway, exceeds this value.

      user_xattr_key:
        type: string
        default: none
        description: |+
          The ```user_xattr_key``` identifies the user xattr used to hold the channel access grants for documents in this database.

          If it is not specified or its value is spaces or null then this feature is disabled (default).

          If you change the value of this key, no existing grant assignments will be changed until a document mutation is triggered.
          This can be done in a number of ways:
          -- a mutation to the document which we’ll see via DCP
          -- an on-demand import either through write or get
          -- by using the resync function.

          *Dependencies:*
            The `user_xattr_key` feature requires that --
            - `enable_shared_bucket_access` be = `true`
            - xattrs be supported on the connected Couchbase Server

          Change initiates a database restart

      client_partition_window_secs:
        type: string
        default: 2592000
        description: |+
          Use `` property to define how long clients can remain offline for without losing replication metadata.

          Default 2 592 000 seconds (30 days)

  import_filter_model:
    type: string
    description: |+
      Provide the JavaScript filter function used to determine whether a document written to the Couchbase Server bucket is made available to Couchbase Mobile clients (imported).

      The function takes the document body as parameter and must return a boolean to indicate whether the document should be imported or not.

      The function is provided in the API body as raw Javascript.

      ```function(doc) {
            if (doc.type != "mobile") {
              return false
            }
            return true
          }```

    default: function(doc) {return false;}

  role_configuration_model:
    title: "Role Configuration Model"
    type: object
    description: |+
      Use the `role` property to define a Sync Gateway role
    required:
      - name
    properties:
      name:
        type: string
        description: |+
          Name of the role
      admin_channels:
        type: array
        description: |+
          Array of channel names the role allows access to
        items:
          type: string
      all_channels:
        type: array
        readOnly: true
        description: |+
          Lists all the channels the role has access to including any assigned by the `sync` function.

          This is a derived property and changes to it are ignored.
        items:
          type: string


  replication_configuration_model:
    type: object
    description: |+
      This replication request message body is a JSON document that comprises all the properties required to upsert a replication.

      If the `replicationID` matches an existing `replication_id` then the values of any properties provided in the body are used to update the existing replication's property values.
    properties:
        replication_id:
          type: string
          description: |+
            **About**

            The *replication_id* property specifies either:
            - For NEW replications, the ID to be assigned to the the replication. If no *replication_id* is specified, Sync Gateway will assign a random UUID to new replications.
            - For existing replications, this is the ID of the required replication.
            - If **cancel=true**, this is the id of the active replication task to be cancelled.

            **Constraints**

            If this is specified in the body of a POST or PUT request then it must be the same value as specified in the request URL.

        remote:
          type: string
          description: |+
            **About**

            The **remote** property represents the endpoint of s database for the remote Sync Gateway.
            That is, it identifies the remote Sync Gateway database that is the subject of this replication's push, pull or pushAndPull action.

            Typically the endpoint will include URI, Port and Database name elements.

            **Format**

            - a string containing a valid URL for a (remote) Sync Gateway database.
            - an object whose url property contains the Sync Gateway database URL.

            **Behavior**

              Dependent upon setting of **direction**.

              If **direction** is :
              - *pull*, 'remote' defines the remote cluster *from* which data is pulled
              - *push*, 'remote' defines the remote cluster *to* which data is pushed
              - *pushAndPull*, 'remote' defines the *push* configuration.

            **Example**

            ```json
            "remote": "http://www.example.com:4984/sample-database",
            ```

        username:
          type: string
          default: Mandatory
          description: |+
            **About**

            Use `username` to provide the name of the accredited user running this replication.

            **Behavior**

            These details are used to authenticate credentials and approve access to data

            Once provided and recorded, the username data is redacted and will not be displayed in either the configuration file or Admin REST API. A string of `****` will be displayed in its place.

        password:
          type: string
          default: mandatory
          description: |+
            **About**

              Use `password` to provide the login password value for the accredited user running this replication.

            **Behavior**

              These details are used to authenticate credentials and approve access to data.

              Once provided and recorded, the password data is redacted and will not be displayed in either the configuration file or Admin REST API. A string of `****` will be displayed in its place.

        direction:
          type: string
          description: |+
            **About**

            The mandatory `direction` property specifies whether the replication is *push*, *pull* or *pushAndPull* relative to this node.

            The property value is referenced by the [remote](rest-api-admin.html#database-this_db-replications-remote) property.

            **Behavior**

            - `pull` -- changes are pulled from the `remote` database
            - `push` -- changes are pushed to the `remote` database
            - `pushAndPull` -- changes are both pushed-to and pulled-from the `remote` database

            **Constraints**

            Replications created prior to version 2.8 derive their *direction* from the source/target url of the replication.

        conflict_resolution_type:
          type: string
          default: default
          description: |+
            **About**

            The **`conflict_resolution_type`** property defines the conflict resolution policy that Sync Gateway applies when resolving conflicting revisions.

            The default behavior is that automatic conflict resolution policy is applied.

            **Valid options**
              - `default`
              - `localWins`
              - `remoteWins`
              - `custom`

            **Behavior**

            - *default* -- Selecting `default` applies the following conflict resolution policy
              - Deletes always win (the delete with longest revision history wins if both revisions are deletes)
              - The revision with the longest revision history wins (so, the one with most changes and consequently the highest revision Id).

            - *localWins* -- Selecting `localWins` will result in local revisions always being the winner in any conflict.
            - *remoteWins* -- Selecting `remoteWins` will result in remote revisions always being the winner in any conflict.


            - *custom* -- Selecting `custom` specifies that you want to handle conflict resolution with your own application logic. You **must** provide this logic as a Javascript function by specifying it in using the custom-conflict-resolver parameter.

            **Example**
            ```
            "conflict_resolution_type":"remoteWins"
            ```

            **Constraints**

            - replications created prior to version 2.8 will default to `default`.

        custom_conflict_resolver:
          type: string
          default: none
          description: |+
            **About**

            The optional `custom_conflict_resolver` property specifies the Javascript function that will be used to resolve conflicts, if the custom conflict resolution type is specified in the `conflict_resolution_type`.

            **Options**

            The property is *mandatory* when `conflict_resolution_type=custom` and will be ignored in all other cases.

            **Using**

            Provide the required logic in a Javascript function, as a string within backticks (see also the description for the `sync` function`.

            The function takes one parameter `struct` representing the conflict and comprising
            - the document id
            - the local document
            - the remote document

            The function returns a document `struct` representing the winning revision.

            **Example**
            ```
            "custom_conflict_resolver":`
              function(conflict) {
                console.log("full remoteDoc doc: "+JSON.stringify(conflict.RemoteDocument));
              return conflict.RemoteDocument;
            }`
            ```

            **Constraints**

            Using complex `custom_conflict_resolver` functions can noticeably degrade performance. Use a built-in resolver whenever possible.

        purge_on_removal:
          type: boolean
          default: false
          description: |+
            **About**

            The optional `purge_on_removal` property specifies, per replication, whether the removal of a `channel` triggers a purge.

            **Options**
            - `true` or `false`
            - Default = false -- document removals are ignored by receiving end

            **Behavior**

            If `purge_on_removal=false`, then the removal of channels is ignored (not purged) by the receiving end.

            **Constraints**

            Replications created prior to version 2.8 *must* be run with `purge_on_removal=false`.

        enable_delta_sync:
          type: boolean
          default: false
          description: |+
            **About**

            The optional `enable_delta_sync` parameter turns on delta sync for a replication.
            It works in conjunction with the database level setting `delta_sync.enabled`.

            **Options**

            - `"enable_delta_sync": true`, the replication can use delta sync (depending on `delta_sync.enabled` setting)
            - `"enable_delta_sync": false`, the replication cannot use delta sync

            **Behavior**

            The optional `enable_delta_sync` parameter works in conjunction with the database level `delta_sync.enabled` setting, to determine whether this replication uses delta sync.

            - **If** `"delta_sync.enabled": true` for both databases involved in the replication, then this parameter enables or disables its use for this specific replication.
            -  In all other cases it has no effect and the replication runs without delta-sync.

            **Constraints**

            - Applies **ONLY** to Enterprise Edition deployments.
            - Depends upon the setting of the database level parameter `delta_sync.enabled`
            - Replications created prior to version 2.8 must run with `"enable_delta_sync": false`
            - Push replications will not use Delta Sync when pushing to a pre-2.8 target

        max_backoff_time:
          type: integer
          default: 5
          description: |+
            The **max_backoff_time**property specifies the time-period (in minutes) during which Sync Gateway will attempt to reconnect lost or unreachable *remote* targets.

            On disconnection, Sync Gateway will do an exponential backoff up to the specified value, after which it will attempt to reconnect indefinitely every *max_backoff_time* minutes.

            If a zero value is specified, then Sync Gateway will do an exponential backoff up to an interval of five minutes before stopping the replication.

            NOTE -- this value defaults to five minutes for replications created prior to version 2.8.

        initial_state:
          type: string
          default: Running
          description: |+
            **About**

            The optional `initial_state` property is used to specify that the replication must be launched in 'Stopped' mode

            **Behavior**

            All replications are configured to start on Sync Gateway launch. So, if omitted, the state defaults to 'Running'.

            **Constraints*

            Replications created prior to version 2.8 will all default to a state of 'Running'.

        continuous:
          type: boolean
          default: false
          description: |+
            **About**

            The `continuous` property specifies whether this replication will run in continuous mode.

            **Behavior**

            - `continuous=true`-- In continuous mode, changes are immediately synced in accordance with the replication definition.
            - `continuous=false`-- Detected changes are synced in accordance with the replication definition. The replication ceases once all revisions are processed.

            **Constraints**

            - Optional for stops and removes

        filter:
          type: string
          description: |+
            **About**

            Use the optional `filter`property to defines the function to be used to filter documents.

            **Options**

            A common value used when replicating from Sync Gateway is `sync_gateway/bychannel`. This option limits the pull replication to a specific set of channels. You can specify the required channels using `query_params`.

            **Behavior**

            Works in conjunction with `query_params` to control the documents processed by the replication.

            **Example**

            ```
            "filter":"sync_gateway/bychannel"
            ```

            **Constraints**

            OPTIONAL for stops and removes (even if defined during creation)

        query_params:
          type: array
          description: |+
            **About**

            The `query_params` property defines a set of key/value pairs used in the query string of the replication.

            **Behavior**

            This property works in conjunction with `filters` and `channels` to provide routing.

            **Using**

            You can use `query_params`' *channels* function to *pull* from a specific set of `channels`.
            To do so, you would also need to set the `filter` to  `sync_gateway/bychannels`.

            **Example**

            ```json
              "filter":"sync_gateway/bychannel",
              "query_params": {
                "channels":["channel.user1"]
              },
            ```

            **Constraints**

            OPTIONAL for stops and removes (even if defined during creation)

          items:
            type: string

        cancel:
          type: boolean
          default: false
          description: |+
            **About**

            Use this parameter on,y when you want to want to cancel an existing active replication.

            **Constraints**

            - This parameter is **NOT** available in configured replications; only those initialized using the Admin REST API.
            - **NOTE** that the body of the request must be the same as the replication's replication definition for the cancellation request to be honoured.
            For example, if you requested continuous replication, the cancellation request must also contain the continuous field.

        adhoc:
          type: boolean
          default: false
          description: |+
            **About**

            Use the Admin REST API's `adhoc` parameter to specify that a replication is ad hoc rather than persistent.

            **Behavior**

            Ad hoc replications behave the same as normal replications, but they are automatically removed when their status changes to stopped.
            This will usually be on completion, but may also be as a result of user action.

            **Constraints**

            This parameter is **NOT** available to configured replications; only those initialized using the Admin REST API.

        batch_size:
          type: integer
          default: 200
          description: |+
            **About**

            Use the optional `batch_size` property to specify the number of changes to be included in a single batch during replication.

        perf_tuning_params:
          type: array
          description: |+
            The perf_tuning_params are not available in this release.

            NOTE -- This property replaces the 'changes_feed_limit' at version 2.8
          items:
            type: string


  sync_function_model:
    type: string
    description: |+
      Use the `sync` property to provision a Javascript Sync function that determines which users can access which documents.

      Provide the function in the API body as raw Javascript.

      See also: [Sync Function](sync-function.html)

    default: |+
      `function(doc, oldDoc) {channel(doc.channels);}`

  user_configuration_model:
    type: object
    title: "User Configuration Model"
    description: |+
      Definition of a Sync Gateway user

      Change initiates database restart

    required:
      - name
    properties:
      name:
        type: string
        description: |+
          The user name (the same name used in the URL path).

          The valid characters for a user name are alphanumeric ASCII characters and the underscore character.

          The name property is required in a POST request.

          You don’t need to include it in a PUT request because the user name is specified in the URL.
      password:
        type: string
        description: |+
          Password of the user.

          Mandatory, unless `allow_empty_password=true`.

      admin_channels:
        type: array
        description: |+
          The channels that the user is able to access.
        items:
          type: string
          description: |+
            Channel name

      admin_roles:
        type: array
        description: |+
          An array of the roles this user is associated with.
        items:
          type: string
          description: Role name

      all_channels:
        type: array
        description: |+
          Shows the channels the user can access, as granted by the sync function.

          This is a read-only property.
          Changes to it are ignored.
        readOnly: true
        items:
          type: string
          description: Channel name
      email:
        type: string
        description: |+
          Email address of the user.
      disabled:
        type: boolean
        description: |+
          This property is usually not included.

          If the value is `true`, access for the account is disabled and the user will not be able to login.
      roles:
        type: array
        readOnly: true
        description: |+
          Shows the roles this user is associated with by the Sync function.

          This is a read-only property.
          Changes to it are ignored.

        items:
          type: string
          description: Role name

  Server:
    type: object
    properties:
      couchdb:
        type: string
        description: Contains the string 'Welcome' (this is required for compatibility with CouchDB)
      vendor/name:
        type: string
        description: The server type ('Couchbase Sync Gateway)
      vendor/version:
        type: string
        description: The server version
      version:
        type: string
        description: Sync Gateway version number

  Session:
    type: object
    properties:
      authentication_handlers:
        type: array
        description: List of authentication methods.
        items:
          type: string
      ok:
        type: boolean
        description: Always true if the operation was successful.
      userCtx:
        $ref: '#/definitions/UserContext'
  UserContext:
    type: object
    description: Context for this user.
    properties:
      channels:
        type: object
        description: Key-value pairs with a channel name as the key and the sequence number that granted the user access to the channel as value.Note that `!` is the public channel and every user has access to it.
      name:
        type: string
        description: The user's name.


parameters:
  db:
    name: db
    in: path
    description: Database name
    type: string
    required: true

  db_config_body:
    name: db config settings
    in: body
    required: true
    schema:
      $ref: '#/definitions/database_configuration_model'

  bootstrap-logging:
    name: bootstrap logging setting
    in: body
    required: true
    schema:
      $ref: '#/definitions/bootstrap-api'

  import_filter_body:
    name: import_filter
    in: body
    required: true
    schema:
      $ref: '#/definitions/import_filter_model'

  replication_id_upsert:
    in: path
    type: string
    name: replicationID
    required: true
    description: |+
      <p>If supplied, the <i>replicationID</i> parameter must be a valid replication id.</p>
      <p>If it is not supplied for a <i>new</i> replication*, then a random UUID is generated.</p>

  replication_body_upsert:
    in: body
    name: replication
    description: The message body is a JSON document that defines an inter-Sync Gateway replication.
    schema:
      $ref: '#/definitions/replication_configuration_model'

  role_body_upsert:
    in: body
    name: role
    description: The message body is a JSON document that contains the following objects.
    schema:
      $ref: '#/definitions/role_configuration_model'

  role_name:
    in: path
    name: name
    description: |+
      Role name, may contain any combination of the characters `[a-z A-Z 0-9 - + . @ %]`, when creating a role any other characters must be percent encoded, see: [https://en.wikipedia.org/wiki/Percent-encoding](https://en.wikipedia.org/wiki/Percent-encoding).

      When passing a role name in a URL path it must be escaped again using percent encoding e.g. if a role is created with the name "0|59", the '|' character must first be percent-encoded resulting in "0%7C59". When using the same role name in a URL path it must be percent-encoded a second time resulting in "0%257C59"
    type: string
    required: true
  name:
    in: path
    name: name
    description: |
      User's name, may contain contain any combination of the characters `[a-z A-Z 0-9 - + . @ %]`, when creating a user any other characters must be percent encoded, see: [https://en.wikipedia.org/wiki/Percent-encoding](https://en.wikipedia.org/wiki/Percent-encoding).

      When passing a user name in a URL path it must be escaped again using percent encoding e.g. if a user is created with the name "0|59", the '|' character must first be percent-encoded resulting in "0%7C59". When using the same user name in a URL path it must be percent-encoded a second time resulting in "0%257C59"
    type: string
    required: true

  sync_function_body:
    name: sync
    in: body
    required: true
    schema:
      $ref: '#/definitions/sync_function_model'

  user_body_upsert:
    in: body
    name: body
    description: Request body
    schema:
      $ref: '#/definitions/user_configuration_model'


responses:

  '200':
    description: OK
    # type: object
    schema:
      properties:
        id:
          type: string
          description: Document identifier
        rev:
          type: string
          description: Revision identifier
        ok:
          type: boolean
          description: Indicates whether the operation was successful

  '200-db-config':
    description: OK
    # type: object
    schema:
      $ref: '#/definitions/database_configuration_model'

  '200-import-filter':
    description: OK
    # type: object
    schema:
      $ref: '#/definitions/import_filter_model'

  '200-role':
    description: OK
    # type: object
    schema:
      $ref: '#/definitions/Role'

  '200-sync':
    description: OK
    # type: object
    schema:
      $ref: '#/definitions/Sync-function'

  '200-user':
    description: OK
    # type: object
    schema:
      $ref: '#/definitions/User'

  '200-bulk-docs':
    description: OK - Operation Successful
    schema:
      properties:
        id:
          type: string
          description: Design document identifier
        rev:
          type: string
          description: Revision identifier

  OK:
    description: 200 OK – Successful Operation

  OK-create:
    description: 201 OK – Successful Create Operation


  Unauthorized:
    description: |+
     401 - Unauthorized

     Typically arising when the supplied basic auth credentials do not match those found on Couchbase Server



tags:
  - name: bootstrap
    description: View and update bootstrap settings
  - name: database
    description: Create and configure databases
  - name: security
    description: Manage users and roles
  - name: access-control
    description: Created and maintain a sync function
  - name: replication
    description: Define an inter-Sync Gateway replication
  # - name: manage
  #   description: Maintain databases
  # - name: session
  #   description: Monitor and manage database sessions
    # externalDocs:
    #   description: Read more about Sync Functions
    #   url: ../sync-function.html
  # - name: role
  #   description: Role Configuration
  # - name: user
  #   description: User Configuration
